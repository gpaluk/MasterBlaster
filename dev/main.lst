                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___SMS__SDSC_signature
                                     12 	.globl ___SMS__SDSC_descr
                                     13 	.globl ___SMS__SDSC_name
                                     14 	.globl ___SMS__SDSC_author
                                     15 	.globl ___SMS__SEGA_signature
                                     16 	.globl _main
                                     17 	.globl _loadGraphics2vram
                                     18 	.globl _UpdateAnimation
                                     19 	.globl _CreateAnimation
                                     20 	.globl _InitAnimation
                                     21 	.globl _DeleteAnimation
                                     22 	.globl _free
                                     23 	.globl _malloc
                                     24 	.globl _SMS_VRAMmemsetW
                                     25 	.globl _SMS_VRAMmemcpy
                                     26 	.globl _SMS_loadSpritePalette
                                     27 	.globl _SMS_loadBGPalette
                                     28 	.globl _SMS_setSpritePaletteColor
                                     29 	.globl _SMS_setBGPaletteColor
                                     30 	.globl _SMS_copySpritestoSAT
                                     31 	.globl _SMS_finalizeSprites
                                     32 	.globl _SMS_initSprites
                                     33 	.globl _SMS_loadPSGaidencompressedTilesatAddr
                                     34 	.globl _SMS_crt0_RST18
                                     35 	.globl _SMS_crt0_RST08
                                     36 	.globl _SMS_waitForVBlank
                                     37 	.globl _SMS_VDPturnOnFeature
                                     38 	.globl _Player1Init
                                     39 	.globl _checkgamepause
                                     40 	.globl _InitConsole
                                     41 	.globl _InterruptHandler
                                     42 	.globl _PSGSFXFrame
                                     43 	.globl _PSGFrame
                                     44 	.globl _PSGSFXGetStatus
                                     45 	.globl _PSGPlayNoRepeat
                                     46 	.globl _PSGPlay
                                     47 	.globl _MAX_FRAMES
                                     48 	.globl _anim
                                     49 	.globl _volume_atenuation
                                     50 	.globl _frame_counter
                                     51 	.globl _SMS_SRAM
                                     52 	.globl _SRAM_bank_to_be_mapped_on_slot2
                                     53 	.globl _ROM_bank_to_be_mapped_on_slot0
                                     54 	.globl _ROM_bank_to_be_mapped_on_slot1
                                     55 	.globl _ROM_bank_to_be_mapped_on_slot2
                                     56 	.globl _player_direction_offset
                                     57 	.globl _player_direction
                                     58 	.globl _player_current_frame
                                     59 	.globl _player_y
                                     60 	.globl _player_x
                                     61 	.globl _sprite_size
                                     62 	.globl _gamepause
                                     63 	.globl _numinterrupts
                                     64 	.globl _Player1Update
                                     65 	.globl _Player1UpdatePosition
                                     66 	.globl _Player1UpdateDraw
                                     67 ;--------------------------------------------------------
                                     68 ; special function registers
                                     69 ;--------------------------------------------------------
                                     70 ;--------------------------------------------------------
                                     71 ; ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area _DATA
      000000                         74 _numinterrupts::
      000000                         75 	.ds 1
      000001                         76 _gamepause::
      000001                         77 	.ds 1
      000002                         78 _sprite_size::
      000002                         79 	.ds 2
      000004                         80 _player_x::
      000004                         81 	.ds 1
      000005                         82 _player_y::
      000005                         83 	.ds 1
      000006                         84 _player_current_frame::
      000006                         85 	.ds 1
      000007                         86 _player_direction::
      000007                         87 	.ds 1
      000008                         88 _player_direction_offset::
      000008                         89 	.ds 1
                           00FFFF    90 _ROM_bank_to_be_mapped_on_slot2	=	0xffff
                           00FFFE    91 _ROM_bank_to_be_mapped_on_slot1	=	0xfffe
                           00FFFD    92 _ROM_bank_to_be_mapped_on_slot0	=	0xfffd
                           00FFFC    93 _SRAM_bank_to_be_mapped_on_slot2	=	0xfffc
                           008000    94 _SMS_SRAM	=	0x8000
      000009                         95 _frame_counter::
      000009                         96 	.ds 1
      00000A                         97 _volume_atenuation::
      00000A                         98 	.ds 1
      00000B                         99 _anim::
      00000B                        100 	.ds 2
                                    101 ;--------------------------------------------------------
                                    102 ; ram data
                                    103 ;--------------------------------------------------------
                                    104 	.area _INITIALIZED
      000000                        105 _MAX_FRAMES::
      000000                        106 	.ds 1
                                    107 ;--------------------------------------------------------
                                    108 ; absolute external ram data
                                    109 ;--------------------------------------------------------
                                    110 	.area _DABS (ABS)
                                    111 ;--------------------------------------------------------
                                    112 ; global & static initialisations
                                    113 ;--------------------------------------------------------
                                    114 	.area _HOME
                                    115 	.area _GSINIT
                                    116 	.area _GSFINAL
                                    117 	.area _GSINIT
                                    118 ;--------------------------------------------------------
                                    119 ; Home
                                    120 ;--------------------------------------------------------
                                    121 	.area _HOME
                                    122 	.area _HOME
                                    123 ;--------------------------------------------------------
                                    124 ; code
                                    125 ;--------------------------------------------------------
                                    126 	.area _CODE
                                    127 ;Core\funcs.h:6: void InterruptHandler(void)
                                    128 ;	---------------------------------
                                    129 ; Function InterruptHandler
                                    130 ; ---------------------------------
      000000                        131 _InterruptHandler::
                                    132 ;Core\funcs.h:9: }
      000000 C9               [10]  133 	ret
                                    134 ;Core\funcs.h:11: void InitConsole(void)
                                    135 ;	---------------------------------
                                    136 ; Function InitConsole
                                    137 ; ---------------------------------
      000001                        138 _InitConsole::
                                    139 ;Core\funcs.h:14: SMS_init();
      000001 CDr00r00         [17]  140 	call	_SMS_init
                                    141 ;Core\funcs.h:17: SMS_getKeysStatus();
      000004 CDr00r00         [17]  142 	call	_SMS_getKeysStatus
                                    143 ;Core\funcs.h:20: SMS_setLineInterruptHandler(&InterruptHandler);
      000007 21r00r00         [10]  144 	ld	hl, #_InterruptHandler
      00000A CDr00r00         [17]  145 	call	_SMS_setLineInterruptHandler
                                    146 ;Core\funcs.h:21: SMS_setLineCounter (192);
      00000D 2E C0            [ 7]  147 	ld	l, #0xc0
                                    148 ;	spillPairReg hl
                                    149 ;	spillPairReg hl
      00000F CDr00r00         [17]  150 	call	_SMS_setLineCounter
                                    151 ;Core\funcs.h:22: SMS_enableLineInterrupt();
      000012 21 10 00         [10]  152 	ld	hl, #0x0010
      000015 CDr00r00         [17]  153 	call	_SMS_VDPturnOnFeature
                                    154 ;Core\funcs.h:25: SMS_VDPturnOnFeature(VDPFEATURE_LEFTCOLBLANK);
      000018 21 20 00         [10]  155 	ld	hl, #0x0020
                                    156 ;Core\funcs.h:26: }
      00001B C3r00r00         [10]  157 	jp	_SMS_VDPturnOnFeature
                                    158 ;Core\funcs.h:28: void checkgamepause()
                                    159 ;	---------------------------------
                                    160 ; Function checkgamepause
                                    161 ; ---------------------------------
      00001E                        162 _checkgamepause::
                                    163 ;Core\funcs.h:30: if(SMS_queryPauseRequested())
      00001E CDr00r00         [17]  164 	call	_SMS_queryPauseRequested
      000021 CB 47            [ 8]  165 	bit	0,a
      000023 C8               [11]  166 	ret	Z
                                    167 ;Core\funcs.h:32: SMS_resetPauseRequest();
      000024 CDr00r00         [17]  168 	call	_SMS_resetPauseRequest
                                    169 ;Core\funcs.h:33: gamepause=1-gamepause;
      000027 3Ar01r00         [13]  170 	ld	a, (_gamepause+0)
      00002A 4F               [ 4]  171 	ld	c, a
      00002B 21r01r00         [10]  172 	ld	hl, #_gamepause
      00002E 3E 01            [ 7]  173 	ld	a, #0x01
      000030 91               [ 4]  174 	sub	a, c
      000031 77               [ 7]  175 	ld	(hl), a
                                    176 ;Core\funcs.h:34: if(gamepause==1)
      000032 3Ar01r00         [13]  177 	ld	a, (_gamepause+0)
      000035 3D               [ 4]  178 	dec	a
      000036 20 06            [12]  179 	jr	NZ, 00102$
                                    180 ;Core\funcs.h:35: PSGPlayNoRepeat(pause_psg);
      000038 21r00r00         [10]  181 	ld	hl, #_pause_psg
      00003B C3r00r00         [10]  182 	jp	_PSGPlayNoRepeat
      00003E                        183 00102$:
                                    184 ;Core\funcs.h:37: PSGPlay(music_psg);
      00003E 21r00r00         [10]  185 	ld	hl, #_music_psg
                                    186 ;Core\funcs.h:39: }
      000041 C3r00r00         [10]  187 	jp	_PSGPlay
                                    188 ;Players/players.h:26: void Player1Init()
                                    189 ;	---------------------------------
                                    190 ; Function Player1Init
                                    191 ; ---------------------------------
      000044                        192 _Player1Init::
                                    193 ;Players/players.h:28: sprite_size = 32*6*12;
      000044 21 00 09         [10]  194 	ld	hl, #0x0900
      000047 22r02r00         [16]  195 	ld	(_sprite_size), hl
                                    196 ;Players/players.h:29: player_x = 128-8;
      00004A 21r04r00         [10]  197 	ld	hl, #_player_x
      00004D 36 78            [10]  198 	ld	(hl), #0x78
                                    199 ;Players/players.h:30: player_y = 96-12;
      00004F 21r05r00         [10]  200 	ld	hl, #_player_y
      000052 36 54            [10]  201 	ld	(hl), #0x54
                                    202 ;Players/players.h:31: player_direction = DOWN;
      000054 21r07r00         [10]  203 	ld	hl, #_player_direction
      000057 36 01            [10]  204 	ld	(hl), #0x01
                                    205 ;Players/players.h:32: player_current_frame = 0;
      000059 21r06r00         [10]  206 	ld	hl, #_player_current_frame
      00005C 36 00            [10]  207 	ld	(hl), #0x00
                                    208 ;Players/players.h:33: player_direction_offset = 0;
      00005E 21r08r00         [10]  209 	ld	hl, #_player_direction_offset
      000061 36 00            [10]  210 	ld	(hl), #0x00
                                    211 ;Players/players.h:34: }
      000063 C9               [10]  212 	ret
                                    213 ;Players/players.h:36: void Player1Update(unsigned char time)
                                    214 ;	---------------------------------
                                    215 ; Function Player1Update
                                    216 ; ---------------------------------
      000064                        217 _Player1Update::
      000064 4F               [ 4]  218 	ld	c, a
                                    219 ;Players/players.h:38: Player1UpdatePosition();
      000065 C5               [11]  220 	push	bc
      000066 CDr6Er00         [17]  221 	call	_Player1UpdatePosition
      000069 C1               [10]  222 	pop	bc
                                    223 ;Players/players.h:39: Player1UpdateDraw(time);
      00006A 79               [ 4]  224 	ld	a, c
                                    225 ;Players/players.h:40: }
      00006B C3r2Fr01         [10]  226 	jp	_Player1UpdateDraw
                                    227 ;Players/players.h:42: void Player1UpdatePosition()
                                    228 ;	---------------------------------
                                    229 ; Function Player1UpdatePosition
                                    230 ; ---------------------------------
      00006E                        231 _Player1UpdatePosition::
                                    232 ;Players/players.h:44: if(SMS_getKeysStatus() & PORT_A_KEY_UP)
      00006E CDr00r00         [17]  233 	call	_SMS_getKeysStatus
      000071 CB 43            [ 8]  234 	bit	0, e
      000073 28 27            [12]  235 	jr	Z, 00122$
                                    236 ;Players/players.h:46: if(player_direction != UP)
      000075 3Ar07r00         [13]  237 	ld	a, (_player_direction+0)
      000078 B7               [ 4]  238 	or	a, a
      000079 28 1C            [12]  239 	jr	Z, 00102$
                                    240 ;Players/players.h:48: SMS_loadTiles(spritetiles_up_bin, PLAYER1_SPRITE_POSITION, sprite_size);
      00007B 2Ar02r00         [16]  241 	ld	hl, (_sprite_size)
      00007E E5               [11]  242 	push	hl
      00007F 11r00r00         [10]  243 	ld	de, #_spritetiles_up_bin
      000082 21 00 60         [10]  244 	ld	hl, #0x6000
      000085 CDr00r00         [17]  245 	call	_SMS_VRAMmemcpy
                                    246 ;Players/players.h:49: player_direction = UP;
      000088 21r07r00         [10]  247 	ld	hl, #_player_direction
      00008B 36 00            [10]  248 	ld	(hl), #0x00
                                    249 ;Players/players.h:50: player_current_frame = 0;
      00008D 21r06r00         [10]  250 	ld	hl, #_player_current_frame
      000090 36 00            [10]  251 	ld	(hl), #0x00
                                    252 ;Players/players.h:51: player_direction_offset = 0;
      000092 21r08r00         [10]  253 	ld	hl, #_player_direction_offset
      000095 36 00            [10]  254 	ld	(hl), #0x00
      000097                        255 00102$:
                                    256 ;Players/players.h:53: player_y--;
      000097 21r05r00         [10]  257 	ld	hl, #_player_y
      00009A 35               [11]  258 	dec	(hl)
      00009B C9               [10]  259 	ret
      00009C                        260 00122$:
                                    261 ;Players/players.h:55: else if(SMS_getKeysStatus() & PORT_A_KEY_DOWN)
      00009C CDr00r00         [17]  262 	call	_SMS_getKeysStatus
      00009F CB 4B            [ 8]  263 	bit	1, e
      0000A1 28 27            [12]  264 	jr	Z, 00119$
                                    265 ;Players/players.h:57: if(player_direction != DOWN)
      0000A3 3Ar07r00         [13]  266 	ld	a, (_player_direction+0)
      0000A6 3D               [ 4]  267 	dec	a
      0000A7 28 1C            [12]  268 	jr	Z, 00104$
                                    269 ;Players/players.h:59: SMS_loadTiles(spritetiles_down_bin, PLAYER1_SPRITE_POSITION, sprite_size);
      0000A9 2Ar02r00         [16]  270 	ld	hl, (_sprite_size)
      0000AC E5               [11]  271 	push	hl
      0000AD 11r00r00         [10]  272 	ld	de, #_spritetiles_down_bin
      0000B0 21 00 60         [10]  273 	ld	hl, #0x6000
      0000B3 CDr00r00         [17]  274 	call	_SMS_VRAMmemcpy
                                    275 ;Players/players.h:60: player_direction = DOWN;
      0000B6 21r07r00         [10]  276 	ld	hl, #_player_direction
      0000B9 36 01            [10]  277 	ld	(hl), #0x01
                                    278 ;Players/players.h:61: player_current_frame = 0;
      0000BB 21r06r00         [10]  279 	ld	hl, #_player_current_frame
      0000BE 36 00            [10]  280 	ld	(hl), #0x00
                                    281 ;Players/players.h:62: player_direction_offset = 0;
      0000C0 21r08r00         [10]  282 	ld	hl, #_player_direction_offset
      0000C3 36 00            [10]  283 	ld	(hl), #0x00
      0000C5                        284 00104$:
                                    285 ;Players/players.h:64: player_y++;
      0000C5 21r05r00         [10]  286 	ld	hl, #_player_y
      0000C8 34               [11]  287 	inc	(hl)
      0000C9 C9               [10]  288 	ret
      0000CA                        289 00119$:
                                    290 ;Players/players.h:66: else if(SMS_getKeysStatus() & PORT_A_KEY_LEFT)
      0000CA CDr00r00         [17]  291 	call	_SMS_getKeysStatus
      0000CD CB 53            [ 8]  292 	bit	2, e
      0000CF 28 2C            [12]  293 	jr	Z, 00116$
                                    294 ;Players/players.h:68: if(player_direction != LEFT)
                                    295 ;Players/players.h:70: if(player_direction != RIGHT)
      0000D1 3Ar07r00         [13]  296 	ld	a,(_player_direction+0)
      0000D4 FE 02            [ 7]  297 	cp	a,#0x02
      0000D6 28 20            [12]  298 	jr	Z, 00108$
      0000D8 D6 03            [ 7]  299 	sub	a, #0x03
      0000DA 28 0D            [12]  300 	jr	Z, 00106$
                                    301 ;Players/players.h:72: SMS_loadTiles(spritetiles_lr_bin, PLAYER1_SPRITE_POSITION, sprite_size);
      0000DC 2Ar02r00         [16]  302 	ld	hl, (_sprite_size)
      0000DF E5               [11]  303 	push	hl
      0000E0 11r00r00         [10]  304 	ld	de, #_spritetiles_lr_bin
      0000E3 21 00 60         [10]  305 	ld	hl, #0x6000
      0000E6 CDr00r00         [17]  306 	call	_SMS_VRAMmemcpy
      0000E9                        307 00106$:
                                    308 ;Players/players.h:74: player_direction = LEFT;
      0000E9 21r07r00         [10]  309 	ld	hl, #_player_direction
      0000EC 36 02            [10]  310 	ld	(hl), #0x02
                                    311 ;Players/players.h:75: player_current_frame = 0;
      0000EE 21r06r00         [10]  312 	ld	hl, #_player_current_frame
      0000F1 36 00            [10]  313 	ld	(hl), #0x00
                                    314 ;Players/players.h:76: player_direction_offset = PLAYER_LR_NUMBER_TILES_FRAMES_BOTH_DIRECTIONS >> 1;
      0000F3 21r08r00         [10]  315 	ld	hl, #_player_direction_offset
      0000F6 36 0C            [10]  316 	ld	(hl), #0x0c
      0000F8                        317 00108$:
                                    318 ;Players/players.h:78: player_x--;
      0000F8 21r04r00         [10]  319 	ld	hl, #_player_x
      0000FB 35               [11]  320 	dec	(hl)
      0000FC C9               [10]  321 	ret
      0000FD                        322 00116$:
                                    323 ;Players/players.h:80: else if(SMS_getKeysStatus() & PORT_A_KEY_RIGHT)
      0000FD CDr00r00         [17]  324 	call	_SMS_getKeysStatus
      000100 CB 5B            [ 8]  325 	bit	3, e
      000102 C8               [11]  326 	ret	Z
                                    327 ;Players/players.h:82: if(player_direction != RIGHT)
                                    328 ;Players/players.h:84: if(player_direction != LEFT)
      000103 3Ar07r00         [13]  329 	ld	a,(_player_direction+0)
      000106 FE 03            [ 7]  330 	cp	a,#0x03
      000108 28 20            [12]  331 	jr	Z, 00112$
      00010A D6 02            [ 7]  332 	sub	a, #0x02
      00010C 28 0D            [12]  333 	jr	Z, 00110$
                                    334 ;Players/players.h:86: SMS_loadTiles(spritetiles_lr_bin, PLAYER1_SPRITE_POSITION, sprite_size);
      00010E 2Ar02r00         [16]  335 	ld	hl, (_sprite_size)
      000111 E5               [11]  336 	push	hl
      000112 11r00r00         [10]  337 	ld	de, #_spritetiles_lr_bin
      000115 21 00 60         [10]  338 	ld	hl, #0x6000
      000118 CDr00r00         [17]  339 	call	_SMS_VRAMmemcpy
      00011B                        340 00110$:
                                    341 ;Players/players.h:88: player_direction = RIGHT;
      00011B 21r07r00         [10]  342 	ld	hl, #_player_direction
      00011E 36 03            [10]  343 	ld	(hl), #0x03
                                    344 ;Players/players.h:89: player_current_frame = 0;
      000120 21r06r00         [10]  345 	ld	hl, #_player_current_frame
      000123 36 00            [10]  346 	ld	(hl), #0x00
                                    347 ;Players/players.h:90: player_direction_offset = 0;
      000125 21r08r00         [10]  348 	ld	hl, #_player_direction_offset
      000128 36 00            [10]  349 	ld	(hl), #0x00
      00012A                        350 00112$:
                                    351 ;Players/players.h:92: player_x++;
      00012A 21r04r00         [10]  352 	ld	hl, #_player_x
      00012D 34               [11]  353 	inc	(hl)
                                    354 ;Players/players.h:94: }
      00012E C9               [10]  355 	ret
                                    356 ;Players/players.h:96: void Player1UpdateDraw(unsigned char time)
                                    357 ;	---------------------------------
                                    358 ; Function Player1UpdateDraw
                                    359 ; ---------------------------------
      00012F                        360 _Player1UpdateDraw::
      00012F DD E5            [15]  361 	push	ix
      000131 DD 21 00 00      [14]  362 	ld	ix,#0
      000135 DD 39            [15]  363 	add	ix,sp
      000137 21 FA FF         [10]  364 	ld	hl, #-6
      00013A 39               [11]  365 	add	hl, sp
      00013B F9               [ 6]  366 	ld	sp, hl
                                    367 ;Players/players.h:100: if((time%8) == 0) {
      00013C E6 07            [ 7]  368 	and	a, #0x07
      00013E 20 59            [12]  369 	jr	NZ, 00121$
                                    370 ;Players/players.h:101: player_current_frame++;
      000140 FD 21r06r00      [14]  371 	ld	iy, #_player_current_frame
      000144 FD 34 00         [23]  372 	inc	0 (iy)
                                    373 ;Players/players.h:103: if(player_direction == UP)
      000147 3Ar07r00         [13]  374 	ld	a, (_player_direction+0)
      00014A B7               [ 4]  375 	or	a, a
      00014B 20 0E            [12]  376 	jr	NZ, 00118$
                                    377 ;Players/players.h:105: if(player_current_frame == PLAYER_UD_NUMBER_FRAMES) {
      00014D 3Ar06r00         [13]  378 	ld	a, (_player_current_frame+0)
      000150 D6 06            [ 7]  379 	sub	a, #0x06
      000152 20 45            [12]  380 	jr	NZ, 00121$
                                    381 ;Players/players.h:106: player_current_frame = 0;
      000154 FD 36 00 00      [19]  382 	ld	0 (iy), #0x00
      000158 C3r99r01         [10]  383 	jp	00121$
      00015B                        384 00118$:
                                    385 ;Players/players.h:109: else if(player_direction == DOWN)
      00015B 3Ar07r00         [13]  386 	ld	a, (_player_direction+0)
      00015E 3D               [ 4]  387 	dec	a
      00015F 20 0F            [12]  388 	jr	NZ, 00115$
                                    389 ;Players/players.h:111: if(player_current_frame == PLAYER_UD_NUMBER_FRAMES) {
      000161 3Ar06r00         [13]  390 	ld	a, (_player_current_frame+0)
      000164 D6 06            [ 7]  391 	sub	a, #0x06
      000166 20 31            [12]  392 	jr	NZ, 00121$
                                    393 ;Players/players.h:112: player_current_frame = 0;
      000168 21r06r00         [10]  394 	ld	hl, #_player_current_frame
      00016B 36 00            [10]  395 	ld	(hl), #0x00
      00016D C3r99r01         [10]  396 	jp	00121$
      000170                        397 00115$:
                                    398 ;Players/players.h:115: else if(player_direction == LEFT)
      000170 3Ar07r00         [13]  399 	ld	a, (_player_direction+0)
      000173 D6 02            [ 7]  400 	sub	a, #0x02
      000175 20 0F            [12]  401 	jr	NZ, 00112$
                                    402 ;Players/players.h:117: if(player_current_frame == PLAYER_LR_NUMBER_FRAMES) {
      000177 3Ar06r00         [13]  403 	ld	a, (_player_current_frame+0)
      00017A D6 06            [ 7]  404 	sub	a, #0x06
      00017C 20 1B            [12]  405 	jr	NZ, 00121$
                                    406 ;Players/players.h:118: player_current_frame = 0;
      00017E 21r06r00         [10]  407 	ld	hl, #_player_current_frame
      000181 36 00            [10]  408 	ld	(hl), #0x00
      000183 C3r99r01         [10]  409 	jp	00121$
      000186                        410 00112$:
                                    411 ;Players/players.h:121: else if(player_direction == RIGHT)
      000186 3Ar07r00         [13]  412 	ld	a, (_player_direction+0)
      000189 D6 03            [ 7]  413 	sub	a, #0x03
      00018B 20 0C            [12]  414 	jr	NZ, 00121$
                                    415 ;Players/players.h:123: if(player_current_frame == PLAYER_LR_NUMBER_FRAMES) {
      00018D 3Ar06r00         [13]  416 	ld	a, (_player_current_frame+0)
      000190 D6 06            [ 7]  417 	sub	a, #0x06
      000192 20 05            [12]  418 	jr	NZ, 00121$
                                    419 ;Players/players.h:124: player_current_frame = 0;
      000194 21r06r00         [10]  420 	ld	hl, #_player_current_frame
      000197 36 00            [10]  421 	ld	(hl), #0x00
      000199                        422 00121$:
                                    423 ;Players/players.h:129: if(player_direction == UP || player_direction == DOWN)
      000199 3Ar07r00         [13]  424 	ld	a, (_player_direction+0)
      00019C B7               [ 4]  425 	or	a, a
      00019D 28 07            [12]  426 	jr	Z, 00155$
      00019F 3Ar07r00         [13]  427 	ld	a, (_player_direction+0)
      0001A2 3D               [ 4]  428 	dec	a
      0001A3 C2r23r02         [10]  429 	jp	NZ,00130$
                                    430 ;Players/players.h:131: for(j=0; j<3; j++)
      0001A6                        431 00155$:
      0001A6 DD 36 FE 00      [19]  432 	ld	-2 (ix), #0x00
                                    433 ;Players/players.h:133: for(i=0; i<2; i++) {
      0001AA                        434 00153$:
      0001AA DD 36 FF 00      [19]  435 	ld	-1 (ix), #0x00
      0001AE                        436 00133$:
                                    437 ;Players/players.h:134: SMS_addSprite(player_x+(i<<3), player_y+(j<<3), PLAYER1_SPRITE_POSITION + player_direction_offset + player_current_frame * PLAYER_UD_NUMBER_TILES_BY_FRAME + PLAYER_UD_NUMBER_TILES_FRAMES_BOTH_DIRECTIONS *j + i);
      0001AE 3Ar04r00         [13]  438 	ld	a, (_player_x+0)
      0001B1 5F               [ 4]  439 	ld	e, a
      0001B2 16 00            [ 7]  440 	ld	d, #0x00
      0001B4 DD 4E FF         [19]  441 	ld	c, -1 (ix)
      0001B7 06 00            [ 7]  442 	ld	b, #0x00
      0001B9 69               [ 4]  443 	ld	l, c
      0001BA 60               [ 4]  444 	ld	h, b
      0001BB 29               [11]  445 	add	hl, hl
      0001BC 29               [11]  446 	add	hl, hl
      0001BD 29               [11]  447 	add	hl, hl
      0001BE 19               [11]  448 	add	hl, de
                                    449 ;	spillPairReg hl
                                    450 ;	spillPairReg hl
      0001BF DD 75 FD         [19]  451 	ld	-3 (ix), l
      0001C2 DD 36 FC 00      [19]  452 	ld	-4 (ix), #0x00
      0001C6 3Ar08r00         [13]  453 	ld	a, (_player_direction_offset+0)
                                    454 ;	spillPairReg hl
                                    455 ;	spillPairReg hl
                                    456 ;	spillPairReg hl
                                    457 ;	spillPairReg hl
      0001C9 5F               [ 4]  458 	ld	e, a
      0001CA AF               [ 4]  459 	xor	a, a
      0001CB 3C               [ 4]  460 	inc	a
      0001CC 57               [ 4]  461 	ld	d, a
      0001CD 3Ar06r00         [13]  462 	ld	a, (_player_current_frame+0)
      0001D0 6F               [ 4]  463 	ld	l, a
                                    464 ;	spillPairReg hl
                                    465 ;	spillPairReg hl
      0001D1 26 00            [ 7]  466 	ld	h, #0x00
                                    467 ;	spillPairReg hl
                                    468 ;	spillPairReg hl
      0001D3 29               [11]  469 	add	hl, hl
      0001D4 19               [11]  470 	add	hl, de
      0001D5 E5               [11]  471 	push	hl
      0001D6 FD E1            [14]  472 	pop	iy
      0001D8 DD 5E FE         [19]  473 	ld	e, -2 (ix)
      0001DB 16 00            [ 7]  474 	ld	d, #0x00
      0001DD D5               [11]  475 	push	de
      0001DE 6B               [ 4]  476 	ld	l, e
      0001DF 62               [ 4]  477 	ld	h, d
      0001E0 29               [11]  478 	add	hl, hl
      0001E1 19               [11]  479 	add	hl, de
      0001E2 29               [11]  480 	add	hl, hl
      0001E3 29               [11]  481 	add	hl, hl
      0001E4 D1               [10]  482 	pop	de
      0001E5 C5               [11]  483 	push	bc
      0001E6 4D               [ 4]  484 	ld	c, l
      0001E7 44               [ 4]  485 	ld	b, h
      0001E8 FD 09            [15]  486 	add	iy, bc
      0001EA C1               [10]  487 	pop	bc
      0001EB FD E5            [15]  488 	push	iy
      0001ED E1               [10]  489 	pop	hl
      0001EE 09               [11]  490 	add	hl, bc
      0001EF 26 00            [ 7]  491 	ld	h, #0x00
                                    492 ;	spillPairReg hl
                                    493 ;	spillPairReg hl
      0001F1 DD 7E FC         [19]  494 	ld	a, -4 (ix)
      0001F4 B5               [ 4]  495 	or	a, l
      0001F5 4F               [ 4]  496 	ld	c, a
      0001F6 DD 7E FD         [19]  497 	ld	a, -3 (ix)
      0001F9 B4               [ 4]  498 	or	a, h
      0001FA 47               [ 4]  499 	ld	b, a
      0001FB 3Ar05r00         [13]  500 	ld	a, (_player_y+0)
      0001FE 6F               [ 4]  501 	ld	l, a
                                    502 ;	spillPairReg hl
                                    503 ;	spillPairReg hl
      0001FF 26 00            [ 7]  504 	ld	h, #0x00
                                    505 ;	spillPairReg hl
                                    506 ;	spillPairReg hl
      000201 EB               [ 4]  507 	ex	de, hl
      000202 29               [11]  508 	add	hl, hl
      000203 29               [11]  509 	add	hl, hl
      000204 29               [11]  510 	add	hl, hl
      000205 EB               [ 4]  511 	ex	de, hl
      000206 19               [11]  512 	add	hl, de
      000207 59               [ 4]  513 	ld	e, c
      000208 50               [ 4]  514 	ld	d, b
      000209 CDr00r00         [17]  515 	call	_SMS_addSprite_f
                                    516 ;Players/players.h:133: for(i=0; i<2; i++) {
      00020C DD 34 FF         [23]  517 	inc	-1 (ix)
      00020F DD 7E FF         [19]  518 	ld	a, -1 (ix)
      000212 D6 02            [ 7]  519 	sub	a, #0x02
      000214 38 98            [12]  520 	jr	C, 00133$
                                    521 ;Players/players.h:131: for(j=0; j<3; j++)
      000216 DD 34 FE         [23]  522 	inc	-2 (ix)
      000219 DD 7E FE         [19]  523 	ld	a, -2 (ix)
      00021C D6 03            [ 7]  524 	sub	a, #0x03
      00021E 38 8A            [12]  525 	jr	C, 00153$
      000220 C3rB4r02         [10]  526 	jp	00141$
      000223                        527 00130$:
                                    528 ;Players/players.h:138: else if(player_direction == LEFT || player_direction == RIGHT)
      000223 3Ar07r00         [13]  529 	ld	a,(_player_direction+0)
      000226 FE 02            [ 7]  530 	cp	a,#0x02
      000228 28 05            [12]  531 	jr	Z, 00160$
      00022A D6 03            [ 7]  532 	sub	a, #0x03
      00022C C2rB4r02         [10]  533 	jp	NZ,00141$
                                    534 ;Players/players.h:140: for(j=0; j<3; j++)
      00022F                        535 00160$:
      00022F DD 36 FE 00      [19]  536 	ld	-2 (ix), #0x00
                                    537 ;Players/players.h:142: for(i=0; i<2; i++) {
      000233                        538 00158$:
      000233 DD 36 FF 00      [19]  539 	ld	-1 (ix), #0x00
      000237                        540 00137$:
                                    541 ;Players/players.h:143: SMS_addSprite(player_x+(i<<3), player_y+(j<<3), PLAYER1_SPRITE_POSITION + player_direction_offset + player_current_frame * PLAYER_LR_NUMBER_TILES_BY_FRAME + PLAYER_LR_NUMBER_TILES_FRAMES_BOTH_DIRECTIONS *j + i);
      000237 3Ar04r00         [13]  542 	ld	a, (_player_x+0)
      00023A 4F               [ 4]  543 	ld	c, a
      00023B 06 00            [ 7]  544 	ld	b, #0x00
      00023D DD 7E FF         [19]  545 	ld	a, -1 (ix)
      000240 DD 77 FA         [19]  546 	ld	-6 (ix), a
      000243 DD 36 FB 00      [19]  547 	ld	-5 (ix), #0x00
      000247 E1               [10]  548 	pop	hl
      000248 E5               [11]  549 	push	hl
      000249 29               [11]  550 	add	hl, hl
      00024A 29               [11]  551 	add	hl, hl
      00024B 29               [11]  552 	add	hl, hl
      00024C 09               [11]  553 	add	hl, bc
                                    554 ;	spillPairReg hl
                                    555 ;	spillPairReg hl
      00024D 45               [ 4]  556 	ld	b, l
      00024E 0E 00            [ 7]  557 	ld	c, #0x00
      000250 3Ar08r00         [13]  558 	ld	a, (_player_direction_offset+0)
      000253 16 00            [ 7]  559 	ld	d, #0x00
      000255 5F               [ 4]  560 	ld	e, a
      000256 14               [ 4]  561 	inc	d
      000257 3Ar06r00         [13]  562 	ld	a, (_player_current_frame+0)
      00025A 26 00            [ 7]  563 	ld	h, #0x00
                                    564 ;	spillPairReg hl
                                    565 ;	spillPairReg hl
      00025C 6F               [ 4]  566 	ld	l, a
      00025D 29               [11]  567 	add	hl, hl
      00025E 19               [11]  568 	add	hl, de
      00025F DD 75 FC         [19]  569 	ld	-4 (ix), l
      000262 DD 74 FD         [19]  570 	ld	-3 (ix), h
      000265 DD 5E FE         [19]  571 	ld	e, -2 (ix)
      000268 16 00            [ 7]  572 	ld	d, #0x00
      00026A D5               [11]  573 	push	de
      00026B 6B               [ 4]  574 	ld	l, e
      00026C 62               [ 4]  575 	ld	h, d
      00026D 29               [11]  576 	add	hl, hl
      00026E 19               [11]  577 	add	hl, de
      00026F 29               [11]  578 	add	hl, hl
      000270 29               [11]  579 	add	hl, hl
      000271 29               [11]  580 	add	hl, hl
      000272 D1               [10]  581 	pop	de
      000273 7D               [ 4]  582 	ld	a, l
      000274 DD 86 FC         [19]  583 	add	a, -4 (ix)
      000277 6F               [ 4]  584 	ld	l, a
                                    585 ;	spillPairReg hl
                                    586 ;	spillPairReg hl
      000278 7C               [ 4]  587 	ld	a, h
      000279 DD 8E FD         [19]  588 	adc	a, -3 (ix)
      00027C 67               [ 4]  589 	ld	h, a
                                    590 ;	spillPairReg hl
                                    591 ;	spillPairReg hl
      00027D 7D               [ 4]  592 	ld	a, l
      00027E DD 86 FA         [19]  593 	add	a, -6 (ix)
      000281 6F               [ 4]  594 	ld	l, a
                                    595 ;	spillPairReg hl
                                    596 ;	spillPairReg hl
      000282 7C               [ 4]  597 	ld	a, h
      000283 DD 8E FB         [19]  598 	adc	a, -5 (ix)
                                    599 ;	spillPairReg hl
                                    600 ;	spillPairReg hl
      000286 26 00            [ 7]  601 	ld	h, #0x00
                                    602 ;	spillPairReg hl
                                    603 ;	spillPairReg hl
      000288 79               [ 4]  604 	ld	a, c
      000289 B5               [ 4]  605 	or	a, l
      00028A 4F               [ 4]  606 	ld	c, a
      00028B 78               [ 4]  607 	ld	a, b
      00028C B4               [ 4]  608 	or	a, h
      00028D 47               [ 4]  609 	ld	b, a
      00028E 3Ar05r00         [13]  610 	ld	a, (_player_y+0)
      000291 6F               [ 4]  611 	ld	l, a
                                    612 ;	spillPairReg hl
                                    613 ;	spillPairReg hl
      000292 26 00            [ 7]  614 	ld	h, #0x00
                                    615 ;	spillPairReg hl
                                    616 ;	spillPairReg hl
      000294 EB               [ 4]  617 	ex	de, hl
      000295 29               [11]  618 	add	hl, hl
      000296 29               [11]  619 	add	hl, hl
      000297 29               [11]  620 	add	hl, hl
      000298 EB               [ 4]  621 	ex	de, hl
      000299 19               [11]  622 	add	hl, de
      00029A 59               [ 4]  623 	ld	e, c
      00029B 50               [ 4]  624 	ld	d, b
      00029C CDr00r00         [17]  625 	call	_SMS_addSprite_f
                                    626 ;Players/players.h:142: for(i=0; i<2; i++) {
      00029F DD 34 FF         [23]  627 	inc	-1 (ix)
      0002A2 DD 7E FF         [19]  628 	ld	a, -1 (ix)
      0002A5 D6 02            [ 7]  629 	sub	a, #0x02
      0002A7 38 8E            [12]  630 	jr	C, 00137$
                                    631 ;Players/players.h:140: for(j=0; j<3; j++)
      0002A9 DD 34 FE         [23]  632 	inc	-2 (ix)
      0002AC DD 7E FE         [19]  633 	ld	a, -2 (ix)
      0002AF D6 03            [ 7]  634 	sub	a, #0x03
      0002B1 DAr33r02         [10]  635 	jp	C, 00158$
      0002B4                        636 00141$:
                                    637 ;Players/players.h:147: }
      0002B4 DD F9            [10]  638 	ld	sp, ix
      0002B6 DD E1            [14]  639 	pop	ix
      0002B8 C9               [10]  640 	ret
                                    641 ;Tiles/animation.h:16: void DeleteAnimation(Animation *anim)
                                    642 ;	---------------------------------
                                    643 ; Function DeleteAnimation
                                    644 ; ---------------------------------
      0002B9                        645 _DeleteAnimation::
                                    646 ;Tiles/animation.h:18: if(anim != NULL)
      0002B9 7C               [ 4]  647 	ld	a, h
      0002BA B5               [ 4]  648 	or	a, l
                                    649 ;Tiles/animation.h:19: free(anim);
      0002BB C2r00r00         [10]  650 	jp	NZ,_free
                                    651 ;Tiles/animation.h:20: }
      0002BE C9               [10]  652 	ret
                                    653 ;Tiles/animation.h:22: void InitAnimation(Animation* anim,
                                    654 ;	---------------------------------
                                    655 ; Function InitAnimation
                                    656 ; ---------------------------------
      0002BF                        657 _InitAnimation::
      0002BF DD E5            [15]  658 	push	ix
      0002C1 DD 21 00 00      [14]  659 	ld	ix,#0
      0002C5 DD 39            [15]  660 	add	ix,sp
      0002C7 FD 21 F9 FF      [14]  661 	ld	iy, #-7
      0002CB FD 39            [15]  662 	add	iy, sp
      0002CD FD F9            [10]  663 	ld	sp, iy
      0002CF 4D               [ 4]  664 	ld	c, l
      0002D0 44               [ 4]  665 	ld	b, h
      0002D1 DD 73 FD         [19]  666 	ld	-3 (ix), e
      0002D4 DD 72 FE         [19]  667 	ld	-2 (ix), d
                                    668 ;Tiles/animation.h:29: anim->mCurrentFrame = 0;
      0002D7 21 43 00         [10]  669 	ld	hl, #0x0043
      0002DA 09               [11]  670 	add	hl, bc
      0002DB 36 00            [10]  671 	ld	(hl), #0x00
                                    672 ;Tiles/animation.h:30: anim->mNumFrames = numFrames;
      0002DD 21 44 00         [10]  673 	ld	hl, #0x0044
      0002E0 09               [11]  674 	add	hl, bc
      0002E1 EB               [ 4]  675 	ex	de, hl
      0002E2 DD 7E 04         [19]  676 	ld	a, 4 (ix)
      0002E5 12               [ 7]  677 	ld	(de), a
                                    678 ;Tiles/animation.h:31: anim->mMapPosX = mapPosX;
      0002E6 21 40 00         [10]  679 	ld	hl, #0x0040
      0002E9 09               [11]  680 	add	hl, bc
      0002EA DD 7E 05         [19]  681 	ld	a, 5 (ix)
      0002ED 77               [ 7]  682 	ld	(hl), a
                                    683 ;Tiles/animation.h:32: anim->mMapPosY = mapPosY;
      0002EE 21 41 00         [10]  684 	ld	hl, #0x0041
      0002F1 09               [11]  685 	add	hl, bc
      0002F2 DD 7E 06         [19]  686 	ld	a, 6 (ix)
      0002F5 77               [ 7]  687 	ld	(hl), a
                                    688 ;Tiles/animation.h:33: anim->mAnimationSpeed = animationSpeed;
      0002F6 21 42 00         [10]  689 	ld	hl, #0x0042
      0002F9 09               [11]  690 	add	hl, bc
      0002FA DD 7E 07         [19]  691 	ld	a, 7 (ix)
      0002FD 77               [ 7]  692 	ld	(hl), a
                                    693 ;Tiles/animation.h:35: if(anim->mNumFrames > MAX_FRAMES)
      0002FE 3Ar00r00         [13]  694 	ld	a, (#_MAX_FRAMES)
      000301 DD 96 04         [19]  695 	sub	a, 4 (ix)
      000304 30 04            [12]  696 	jr	NC, 00111$
                                    697 ;Tiles/animation.h:37: anim->mNumFrames = MAX_FRAMES;
      000306 3Ar00r00         [13]  698 	ld	a, (_MAX_FRAMES+0)
      000309 12               [ 7]  699 	ld	(de), a
                                    700 ;Tiles/animation.h:40: for(unsigned char i = 0; i < anim->mNumFrames; i++)
      00030A                        701 00111$:
      00030A DD 36 FF 00      [19]  702 	ld	-1 (ix), #0x00
      00030E                        703 00105$:
      00030E 1A               [ 7]  704 	ld	a, (de)
      00030F 6F               [ 4]  705 	ld	l, a
                                    706 ;	spillPairReg hl
                                    707 ;	spillPairReg hl
      000310 DD 7E FF         [19]  708 	ld	a, -1 (ix)
      000313 95               [ 4]  709 	sub	a, l
      000314 30 38            [12]  710 	jr	NC, 00107$
                                    711 ;Tiles/animation.h:42: anim->mFrames[i] = frames[i];
      000316 DD 7E FF         [19]  712 	ld	a, -1 (ix)
      000319 87               [ 4]  713 	add	a, a
      00031A 81               [ 4]  714 	add	a, c
      00031B DD 77 F9         [19]  715 	ld	-7 (ix), a
      00031E 3E 00            [ 7]  716 	ld	a, #0x00
      000320 88               [ 4]  717 	adc	a, b
      000321 DD 77 FA         [19]  718 	ld	-6 (ix), a
      000324 DD 6E FF         [19]  719 	ld	l, -1 (ix)
                                    720 ;	spillPairReg hl
                                    721 ;	spillPairReg hl
      000327 26 00            [ 7]  722 	ld	h, #0x00
                                    723 ;	spillPairReg hl
                                    724 ;	spillPairReg hl
      000329 29               [11]  725 	add	hl, hl
      00032A 7D               [ 4]  726 	ld	a, l
      00032B DD 86 FD         [19]  727 	add	a, -3 (ix)
      00032E 6F               [ 4]  728 	ld	l, a
                                    729 ;	spillPairReg hl
                                    730 ;	spillPairReg hl
      00032F 7C               [ 4]  731 	ld	a, h
      000330 DD 8E FE         [19]  732 	adc	a, -2 (ix)
      000333 67               [ 4]  733 	ld	h, a
                                    734 ;	spillPairReg hl
                                    735 ;	spillPairReg hl
      000334 7E               [ 7]  736 	ld	a, (hl)
      000335 DD 77 FB         [19]  737 	ld	-5 (ix), a
      000338 23               [ 6]  738 	inc	hl
      000339 7E               [ 7]  739 	ld	a, (hl)
      00033A DD 77 FC         [19]  740 	ld	-4 (ix), a
      00033D E1               [10]  741 	pop	hl
      00033E E5               [11]  742 	push	hl
      00033F DD 7E FB         [19]  743 	ld	a, -5 (ix)
      000342 77               [ 7]  744 	ld	(hl), a
      000343 23               [ 6]  745 	inc	hl
      000344 DD 7E FC         [19]  746 	ld	a, -4 (ix)
      000347 77               [ 7]  747 	ld	(hl), a
                                    748 ;Tiles/animation.h:40: for(unsigned char i = 0; i < anim->mNumFrames; i++)
      000348 DD 34 FF         [23]  749 	inc	-1 (ix)
      00034B C3r0Er03         [10]  750 	jp	00105$
      00034E                        751 00107$:
                                    752 ;Tiles/animation.h:44: }
      00034E DD F9            [10]  753 	ld	sp, ix
      000350 DD E1            [14]  754 	pop	ix
      000352 E1               [10]  755 	pop	hl
      000353 F1               [10]  756 	pop	af
      000354 F1               [10]  757 	pop	af
      000355 E9               [ 4]  758 	jp	(hl)
                                    759 ;Tiles/animation.h:46: Animation* CreateAnimation(
                                    760 ;	---------------------------------
                                    761 ; Function CreateAnimation
                                    762 ; ---------------------------------
      000356                        763 _CreateAnimation::
      000356 DD E5            [15]  764 	push	ix
      000358 DD 21 00 00      [14]  765 	ld	ix,#0
      00035C DD 39            [15]  766 	add	ix,sp
                                    767 ;Tiles/animation.h:53: struct Animation* anim = malloc(sizeof (struct Animation));
      00035E E5               [11]  768 	push	hl
      00035F 21 45 00         [10]  769 	ld	hl, #0x0045
      000362 CDr00r00         [17]  770 	call	_malloc
      000365 EB               [ 4]  771 	ex	de, hl
      000366 D1               [10]  772 	pop	de
                                    773 ;Tiles/animation.h:55: if (anim == NULL)
      000367 7C               [ 4]  774 	ld	a, h
      000368 B5               [ 4]  775 	or	a, l
      000369 20 06            [12]  776 	jr	NZ, 00102$
                                    777 ;Tiles/animation.h:56: return NULL;
      00036B 11 00 00         [10]  778 	ld	de, #0x0000
      00036E C3r85r03         [10]  779 	jp	00103$
      000371                        780 00102$:
                                    781 ;Tiles/animation.h:58: InitAnimation(anim, frames, numFrames, mapPosX, mapPosY, animationSpeed);
      000371 E5               [11]  782 	push	hl
      000372 DD 46 07         [19]  783 	ld	b, 7 (ix)
      000375 DD 4E 06         [19]  784 	ld	c, 6 (ix)
      000378 C5               [11]  785 	push	bc
      000379 DD 46 05         [19]  786 	ld	b, 5 (ix)
      00037C DD 4E 04         [19]  787 	ld	c, 4 (ix)
      00037F C5               [11]  788 	push	bc
      000380 CDrBFr02         [17]  789 	call	_InitAnimation
      000383 E1               [10]  790 	pop	hl
                                    791 ;Tiles/animation.h:60: return anim;
      000384 EB               [ 4]  792 	ex	de, hl
      000385                        793 00103$:
                                    794 ;Tiles/animation.h:61: }
      000385 DD E1            [14]  795 	pop	ix
      000387 E1               [10]  796 	pop	hl
      000388 F1               [10]  797 	pop	af
      000389 F1               [10]  798 	pop	af
      00038A E9               [ 4]  799 	jp	(hl)
                                    800 ;Tiles/animation.h:63: void UpdateAnimation(Animation* animation, unsigned char time)
                                    801 ;	---------------------------------
                                    802 ; Function UpdateAnimation
                                    803 ; ---------------------------------
      00038B                        804 _UpdateAnimation::
      00038B DD E5            [15]  805 	push	ix
      00038D DD 21 00 00      [14]  806 	ld	ix,#0
      000391 DD 39            [15]  807 	add	ix,sp
      000393 F5               [11]  808 	push	af
      000394 4D               [ 4]  809 	ld	c, l
      000395 44               [ 4]  810 	ld	b, h
                                    811 ;Tiles/animation.h:65: if((time % animation->mAnimationSpeed) == 0)
      000396 C5               [11]  812 	push	bc
      000397 FD E1            [14]  813 	pop	iy
      000399 FD 6E 42         [19]  814 	ld	l, 66 (iy)
                                    815 ;	spillPairReg hl
      00039C C5               [11]  816 	push	bc
      00039D DD 7E 04         [19]  817 	ld	a, 4 (ix)
      0003A0 CDr00r00         [17]  818 	call	__moduchar
      0003A3 C1               [10]  819 	pop	bc
      0003A4 7B               [ 4]  820 	ld	a, e
      0003A5 B7               [ 4]  821 	or	a, a
      0003A6 20 48            [12]  822 	jr	NZ, 00108$
                                    823 ;Tiles/animation.h:67: animation->mCurrentFrame++;
      0003A8 21 43 00         [10]  824 	ld	hl, #0x0043
      0003AB 09               [11]  825 	add	hl, bc
      0003AC EB               [ 4]  826 	ex	de, hl
      0003AD 1A               [ 7]  827 	ld	a, (de)
      0003AE 3C               [ 4]  828 	inc	a
      0003AF DD 77 FF         [19]  829 	ld	-1 (ix), a
      0003B2 12               [ 7]  830 	ld	(de), a
                                    831 ;Tiles/animation.h:69: if(animation->mCurrentFrame > animation->mNumFrames)
      0003B3 C5               [11]  832 	push	bc
      0003B4 FD E1            [14]  833 	pop	iy
                                    834 ;	spillPairReg hl
      0003B6 FD 7E 44         [19]  835 	ld	a, 68 (iy)
      0003B9 DD 96 FF         [19]  836 	sub	a, -1 (ix)
      0003BC 30 02            [12]  837 	jr	NC, 00103$
                                    838 ;Tiles/animation.h:71: animation->mCurrentFrame = 0;
      0003BE AF               [ 4]  839 	xor	a, a
      0003BF 12               [ 7]  840 	ld	(de), a
                                    841 ;Tiles/animation.h:74: SMS_setTileatXY(animation->mMapPosX, animation->mMapPosX, animation->mFrames[animation->mCurrentFrame]);
      0003C0                        842 00103$:
      0003C0 69               [ 4]  843 	ld	l, c
                                    844 ;	spillPairReg hl
                                    845 ;	spillPairReg hl
      0003C1 60               [ 4]  846 	ld	h, b
                                    847 ;	spillPairReg hl
                                    848 ;	spillPairReg hl
      0003C2 C5               [11]  849 	push	bc
      0003C3 01 40 00         [10]  850 	ld	bc, #0x0040
      0003C6 09               [11]  851 	add	hl, bc
      0003C7 C1               [10]  852 	pop	bc
      0003C8 7E               [ 7]  853 	ld	a, (hl)
      0003C9 6F               [ 4]  854 	ld	l, a
                                    855 ;	spillPairReg hl
                                    856 ;	spillPairReg hl
      0003CA 26 00            [ 7]  857 	ld	h, #0x00
                                    858 ;	spillPairReg hl
                                    859 ;	spillPairReg hl
      0003CC 29               [11]  860 	add	hl, hl
      0003CD 29               [11]  861 	add	hl, hl
      0003CE 29               [11]  862 	add	hl, hl
      0003CF 29               [11]  863 	add	hl, hl
      0003D0 29               [11]  864 	add	hl, hl
      0003D1 E3               [19]  865 	ex	(sp), hl
      0003D2 26 00            [ 7]  866 	ld	h, #0x00
                                    867 ;	spillPairReg hl
                                    868 ;	spillPairReg hl
      0003D4 DD 86 FE         [19]  869 	add	a, -2 (ix)
      0003D7 6F               [ 4]  870 	ld	l, a
                                    871 ;	spillPairReg hl
                                    872 ;	spillPairReg hl
      0003D8 7C               [ 4]  873 	ld	a, h
      0003D9 DD 8E FF         [19]  874 	adc	a, -1 (ix)
      0003DC 67               [ 4]  875 	ld	h, a
      0003DD 29               [11]  876 	add	hl, hl
      0003DE 7C               [ 4]  877 	ld	a, h
      0003DF F6 78            [ 7]  878 	or	a, #0x78
      0003E1 67               [ 4]  879 	ld	h, a
                                    880 ;	spillPairReg hl
                                    881 ;	spillPairReg hl
      0003E2 C5               [11]  882 	push	bc
      0003E3 CF               [11]  883 	rst	#0x08
      0003E4 C1               [10]  884 	pop	bc
      0003E5 1A               [ 7]  885 	ld	a, (de)
      0003E6 87               [ 4]  886 	add	a, a
      0003E7 6F               [ 4]  887 	ld	l, a
      0003E8 26 00            [ 7]  888 	ld	h, #0x00
      0003EA 09               [11]  889 	add	hl, bc
      0003EB 4E               [ 7]  890 	ld	c, (hl)
      0003EC 23               [ 6]  891 	inc	hl
      0003ED 66               [ 7]  892 	ld	h, (hl)
                                    893 ;	spillPairReg hl
      0003EE 69               [ 4]  894 	ld	l, c
                                    895 ;	spillPairReg hl
                                    896 ;	spillPairReg hl
      0003EF DF               [11]  897 	rst	#0x18
      0003F0                        898 00108$:
                                    899 ;Tiles/animation.h:78: }
      0003F0 DD F9            [10]  900 	ld	sp, ix
      0003F2 DD E1            [14]  901 	pop	ix
      0003F4 E1               [10]  902 	pop	hl
      0003F5 33               [ 6]  903 	inc	sp
      0003F6 E9               [ 4]  904 	jp	(hl)
                                    905 ;main.c:10: void loadGraphics2vram(void)
                                    906 ;	---------------------------------
                                    907 ; Function loadGraphics2vram
                                    908 ; ---------------------------------
      0003F7                        909 _loadGraphics2vram::
      0003F7 21 D8 FF         [10]  910 	ld	hl, #-40
      0003FA 39               [11]  911 	add	hl, sp
      0003FB F9               [ 6]  912 	ld	sp, hl
                                    913 ;main.c:13: SMS_VRAMmemsetW(0, 0x0000, 0x4000);
      0003FC 21 00 40         [10]  914 	ld	hl, #0x4000
      0003FF E5               [11]  915 	push	hl
      000400 11 00 00         [10]  916 	ld	de, #0x0000
      000403 65               [ 4]  917 	ld	h, l
      000404 CDr00r00         [17]  918 	call	_SMS_VRAMmemsetW
                                    919 ;main.c:16: SMS_loadBGPalette(backgroundpalette_bin);
      000407 21r00r00         [10]  920 	ld	hl, #_backgroundpalette_bin
      00040A CDr00r00         [17]  921 	call	_SMS_loadBGPalette
                                    922 ;main.c:17: SMS_loadPSGaidencompressedTiles(backgroundtiles_psgcompr, 0);
      00040D 11 00 40         [10]  923 	ld	de, #0x4000
      000410 21r00r00         [10]  924 	ld	hl, #_backgroundtiles_psgcompr
      000413 CDr00r00         [17]  925 	call	_SMS_loadPSGaidencompressedTilesatAddr
                                    926 ;main.c:18: SMS_loadTileMap(0,0, backgroundtilemap_bin, backgroundtilemap_bin_size);
      000416 21 00 06         [10]  927 	ld	hl, #0x0600
      000419 E5               [11]  928 	push	hl
      00041A 11r00r00         [10]  929 	ld	de, #_backgroundtilemap_bin
      00041D 26 78            [ 7]  930 	ld	h, #0x78
      00041F CDr00r00         [17]  931 	call	_SMS_VRAMmemcpy
                                    932 ;main.c:19: SMS_setBGPaletteColor(0, RGB(0, 2, 3));
      000422 2E 38            [ 7]  933 	ld	l, #0x38
                                    934 ;	spillPairReg hl
                                    935 ;	spillPairReg hl
      000424 AF               [ 4]  936 	xor	a, a
      000425 CDr00r00         [17]  937 	call	_SMS_setBGPaletteColor
                                    938 ;main.c:22: SMS_loadSpritePalette(spritepalette_bin);
      000428 21r00r00         [10]  939 	ld	hl, #_spritepalette_bin
      00042B CDr00r00         [17]  940 	call	_SMS_loadSpritePalette
                                    941 ;main.c:23: SMS_loadTiles(spritetiles_down_bin, PLAYER1_SPRITE_POSITION, 32*6*6);
      00042E 21 80 04         [10]  942 	ld	hl, #0x0480
      000431 E5               [11]  943 	push	hl
      000432 11r00r00         [10]  944 	ld	de, #_spritetiles_down_bin
      000435 21 00 60         [10]  945 	ld	hl, #0x6000
      000438 CDr00r00         [17]  946 	call	_SMS_VRAMmemcpy
                                    947 ;main.c:24: SMS_setSpritePaletteColor(0, RGB(0, 0, 0));
                                    948 ;	spillPairReg hl
                                    949 ;	spillPairReg hl
      00043B AF               [ 4]  950 	xor	a, a
      00043C 6F               [ 4]  951 	ld	l, a
      00043D CDr00r00         [17]  952 	call	_SMS_setSpritePaletteColor
                                    953 ;main.c:27: int frames[20] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
      000440 21 00 00         [10]  954 	ld	hl, #0
      000443 39               [11]  955 	add	hl, sp
      000444 5D               [ 4]  956 	ld	e, l
      000445 54               [ 4]  957 	ld	d, h
      000446 36 01            [10]  958 	ld	(hl), #0x01
      000448 23               [ 6]  959 	inc	hl
      000449 36 00            [10]  960 	ld	(hl), #0x00
      00044B 6B               [ 4]  961 	ld	l, e
                                    962 ;	spillPairReg hl
                                    963 ;	spillPairReg hl
      00044C 62               [ 4]  964 	ld	h, d
                                    965 ;	spillPairReg hl
                                    966 ;	spillPairReg hl
      00044D 23               [ 6]  967 	inc	hl
      00044E 23               [ 6]  968 	inc	hl
      00044F 36 02            [10]  969 	ld	(hl), #0x02
      000451 23               [ 6]  970 	inc	hl
      000452 36 00            [10]  971 	ld	(hl), #0x00
      000454 21 04 00         [10]  972 	ld	hl, #0x0004
      000457 19               [11]  973 	add	hl, de
      000458 36 03            [10]  974 	ld	(hl), #0x03
      00045A 23               [ 6]  975 	inc	hl
      00045B 36 00            [10]  976 	ld	(hl), #0x00
      00045D 21 06 00         [10]  977 	ld	hl, #0x0006
      000460 19               [11]  978 	add	hl, de
      000461 36 04            [10]  979 	ld	(hl), #0x04
      000463 23               [ 6]  980 	inc	hl
      000464 36 00            [10]  981 	ld	(hl), #0x00
      000466 21 08 00         [10]  982 	ld	hl, #0x0008
      000469 19               [11]  983 	add	hl, de
      00046A 36 05            [10]  984 	ld	(hl), #0x05
      00046C 23               [ 6]  985 	inc	hl
      00046D 36 00            [10]  986 	ld	(hl), #0x00
      00046F 21 0A 00         [10]  987 	ld	hl, #0x000a
      000472 19               [11]  988 	add	hl, de
      000473 36 06            [10]  989 	ld	(hl), #0x06
      000475 23               [ 6]  990 	inc	hl
      000476 36 00            [10]  991 	ld	(hl), #0x00
      000478 21 0C 00         [10]  992 	ld	hl, #0x000c
      00047B 19               [11]  993 	add	hl, de
      00047C 36 07            [10]  994 	ld	(hl), #0x07
      00047E 23               [ 6]  995 	inc	hl
      00047F 36 00            [10]  996 	ld	(hl), #0x00
      000481 21 0E 00         [10]  997 	ld	hl, #0x000e
      000484 19               [11]  998 	add	hl, de
      000485 36 08            [10]  999 	ld	(hl), #0x08
      000487 23               [ 6] 1000 	inc	hl
      000488 36 00            [10] 1001 	ld	(hl), #0x00
      00048A 21 10 00         [10] 1002 	ld	hl, #0x0010
      00048D 19               [11] 1003 	add	hl, de
      00048E 36 09            [10] 1004 	ld	(hl), #0x09
      000490 23               [ 6] 1005 	inc	hl
      000491 36 00            [10] 1006 	ld	(hl), #0x00
      000493 21 12 00         [10] 1007 	ld	hl, #0x0012
      000496 19               [11] 1008 	add	hl, de
      000497 36 0A            [10] 1009 	ld	(hl), #0x0a
      000499 23               [ 6] 1010 	inc	hl
      00049A 36 00            [10] 1011 	ld	(hl), #0x00
      00049C 21 14 00         [10] 1012 	ld	hl, #0x0014
      00049F 19               [11] 1013 	add	hl, de
      0004A0 36 0B            [10] 1014 	ld	(hl), #0x0b
      0004A2 23               [ 6] 1015 	inc	hl
      0004A3 36 00            [10] 1016 	ld	(hl), #0x00
      0004A5 21 16 00         [10] 1017 	ld	hl, #0x0016
      0004A8 19               [11] 1018 	add	hl, de
      0004A9 36 0C            [10] 1019 	ld	(hl), #0x0c
      0004AB 23               [ 6] 1020 	inc	hl
      0004AC 36 00            [10] 1021 	ld	(hl), #0x00
      0004AE 21 18 00         [10] 1022 	ld	hl, #0x0018
      0004B1 19               [11] 1023 	add	hl, de
      0004B2 36 0D            [10] 1024 	ld	(hl), #0x0d
      0004B4 23               [ 6] 1025 	inc	hl
      0004B5 36 00            [10] 1026 	ld	(hl), #0x00
      0004B7 21 1A 00         [10] 1027 	ld	hl, #0x001a
      0004BA 19               [11] 1028 	add	hl, de
      0004BB 36 0E            [10] 1029 	ld	(hl), #0x0e
      0004BD 23               [ 6] 1030 	inc	hl
      0004BE 36 00            [10] 1031 	ld	(hl), #0x00
      0004C0 21 1C 00         [10] 1032 	ld	hl, #0x001c
      0004C3 19               [11] 1033 	add	hl, de
      0004C4 36 0F            [10] 1034 	ld	(hl), #0x0f
      0004C6 23               [ 6] 1035 	inc	hl
      0004C7 36 00            [10] 1036 	ld	(hl), #0x00
      0004C9 21 1E 00         [10] 1037 	ld	hl, #0x001e
      0004CC 19               [11] 1038 	add	hl, de
      0004CD 36 10            [10] 1039 	ld	(hl), #0x10
      0004CF 23               [ 6] 1040 	inc	hl
      0004D0 36 00            [10] 1041 	ld	(hl), #0x00
      0004D2 21 20 00         [10] 1042 	ld	hl, #0x0020
      0004D5 19               [11] 1043 	add	hl, de
      0004D6 36 11            [10] 1044 	ld	(hl), #0x11
      0004D8 23               [ 6] 1045 	inc	hl
      0004D9 36 00            [10] 1046 	ld	(hl), #0x00
      0004DB 21 22 00         [10] 1047 	ld	hl, #0x0022
      0004DE 19               [11] 1048 	add	hl, de
      0004DF 36 12            [10] 1049 	ld	(hl), #0x12
      0004E1 23               [ 6] 1050 	inc	hl
      0004E2 36 00            [10] 1051 	ld	(hl), #0x00
      0004E4 21 24 00         [10] 1052 	ld	hl, #0x0024
      0004E7 19               [11] 1053 	add	hl, de
      0004E8 36 13            [10] 1054 	ld	(hl), #0x13
      0004EA 23               [ 6] 1055 	inc	hl
      0004EB 36 00            [10] 1056 	ld	(hl), #0x00
      0004ED 21 26 00         [10] 1057 	ld	hl, #0x0026
      0004F0 19               [11] 1058 	add	hl, de
      0004F1 36 14            [10] 1059 	ld	(hl), #0x14
      0004F3 23               [ 6] 1060 	inc	hl
      0004F4 36 00            [10] 1061 	ld	(hl), #0x00
                                   1062 ;main.c:28: anim = CreateAnimation(frames, 20, 2, 2, 32);
      0004F6 01 02 20         [10] 1063 	ld	bc, #0x2002
      0004F9 C5               [11] 1064 	push	bc
      0004FA 3E 02            [ 7] 1065 	ld	a, #0x02
      0004FC F5               [11] 1066 	push	af
      0004FD 33               [ 6] 1067 	inc	sp
      0004FE 3E 14            [ 7] 1068 	ld	a, #0x14
      000500 F5               [11] 1069 	push	af
      000501 33               [ 6] 1070 	inc	sp
      000502 EB               [ 4] 1071 	ex	de, hl
      000503 CDr56r03         [17] 1072 	call	_CreateAnimation
      000506 ED 53r0Br00      [20] 1073 	ld	(_anim), de
                                   1074 ;main.c:29: }
      00050A 21 28 00         [10] 1075 	ld	hl, #40
      00050D 39               [11] 1076 	add	hl, sp
      00050E F9               [ 6] 1077 	ld	sp, hl
      00050F C9               [10] 1078 	ret
                                   1079 ;main.c:31: void main (void)
                                   1080 ;	---------------------------------
                                   1081 ; Function main
                                   1082 ; ---------------------------------
      000510                       1083 _main::
                                   1084 ;main.c:33: frame_counter = 0;
      000510 21r09r00         [10] 1085 	ld	hl, #_frame_counter
      000513 36 00            [10] 1086 	ld	(hl), #0x00
                                   1087 ;main.c:35: Player1Init();
      000515 CDr44r00         [17] 1088 	call	_Player1Init
                                   1089 ;main.c:36: InitConsole();
      000518 CDr01r00         [17] 1090 	call	_InitConsole
                                   1091 ;main.c:38: loadGraphics2vram();
      00051B CDrF7r03         [17] 1092 	call	_loadGraphics2vram
                                   1093 ;main.c:39: SMS_displayOn();
      00051E 21 40 01         [10] 1094 	ld	hl, #0x0140
      000521 CDr00r00         [17] 1095 	call	_SMS_VDPturnOnFeature
                                   1096 ;main.c:41: PSGPlay(music_psg);
      000524 21r00r00         [10] 1097 	ld	hl, #_music_psg
      000527 CDr00r00         [17] 1098 	call	_PSGPlay
                                   1099 ;main.c:44: while(1)
      00052A                       1100 00111$:
                                   1101 ;main.c:47: checkgamepause();
      00052A CDr1Er00         [17] 1102 	call	_checkgamepause
                                   1103 ;main.c:49: if(gamepause==0)
      00052D 3Ar01r00         [13] 1104 	ld	a, (_gamepause+0)
      000530 B7               [ 4] 1105 	or	a, a
      000531 20 43            [12] 1106 	jr	NZ, 00108$
                                   1107 ;main.c:51: frame_counter++;
      000533 21r09r00         [10] 1108 	ld	hl, #_frame_counter
      000536 34               [11] 1109 	inc	(hl)
                                   1110 ;main.c:53: if((frame_counter%64) == 0)
      000537 3Ar09r00         [13] 1111 	ld	a, (_frame_counter+0)
      00053A E6 3F            [ 7] 1112 	and	a, #0x3f
      00053C 20 12            [12] 1113 	jr	NZ, 00104$
                                   1114 ;main.c:55: volume_atenuation++;
      00053E FD 21r0Ar00      [14] 1115 	ld	iy, #_volume_atenuation
      000542 FD 34 00         [23] 1116 	inc	0 (iy)
                                   1117 ;main.c:56: if(volume_atenuation > 15)
      000545 3E 0F            [ 7] 1118 	ld	a, #0x0f
      000547 FD 96 00         [19] 1119 	sub	a, 0 (iy)
      00054A 30 04            [12] 1120 	jr	NC, 00104$
                                   1121 ;main.c:58: volume_atenuation = 0;
      00054C FD 36 00 00      [19] 1122 	ld	0 (iy), #0x00
      000550                       1123 00104$:
                                   1124 ;main.c:63: UpdateAnimation(anim, frame_counter);
      000550 3Ar09r00         [13] 1125 	ld	a, (_frame_counter+0)
      000553 F5               [11] 1126 	push	af
      000554 33               [ 6] 1127 	inc	sp
      000555 2Ar0Br00         [16] 1128 	ld	hl, (_anim)
      000558 CDr8Br03         [17] 1129 	call	_UpdateAnimation
                                   1130 ;main.c:66: SMS_initSprites();
      00055B CDr00r00         [17] 1131 	call	_SMS_initSprites
                                   1132 ;main.c:68: Player1Update(frame_counter);
      00055E 3Ar09r00         [13] 1133 	ld	a, (_frame_counter+0)
      000561 CDr64r00         [17] 1134 	call	_Player1Update
                                   1135 ;main.c:75: SMS_finalizeSprites();
      000564 CDr00r00         [17] 1136 	call	_SMS_finalizeSprites
                                   1137 ;main.c:76: SMS_waitForVBlank();
      000567 CDr00r00         [17] 1138 	call	_SMS_waitForVBlank
                                   1139 ;main.c:78: PSGFrame();
      00056A CDr00r00         [17] 1140 	call	_PSGFrame
                                   1141 ;main.c:79: PSGSFXFrame();
      00056D CDr00r00         [17] 1142 	call	_PSGSFXFrame
                                   1143 ;main.c:81: SMS_copySpritestoSAT();
      000570 CDr00r00         [17] 1144 	call	_SMS_copySpritestoSAT
      000573 C3r2Ar05         [10] 1145 	jp	00111$
      000576                       1146 00108$:
                                   1147 ;main.c:88: PSGFrame();
      000576 CDr00r00         [17] 1148 	call	_PSGFrame
                                   1149 ;main.c:90: if(PSGSFXGetStatus())
      000579 CDr00r00         [17] 1150 	call	_PSGSFXGetStatus
      00057C B7               [ 4] 1151 	or	a, a
      00057D 28 03            [12] 1152 	jr	Z, 00106$
                                   1153 ;main.c:92: PSGSFXFrame();
      00057F CDr00r00         [17] 1154 	call	_PSGSFXFrame
      000582                       1155 00106$:
                                   1156 ;main.c:96: SMS_waitForVBlank();
      000582 CDr00r00         [17] 1157 	call	_SMS_waitForVBlank
                                   1158 ;main.c:99: numinterrupts=0;
      000585 21r00r00         [10] 1159 	ld	hl, #_numinterrupts
      000588 36 00            [10] 1160 	ld	(hl), #0x00
                                   1161 ;main.c:102: }
      00058A C3r2Ar05         [10] 1162 	jp	00111$
                                   1163 	.area _CODE
      00058D                       1164 __str_0:
      00058D 47 61 72 79 20 50 61  1165 	.ascii "Gary Paluk"
             6C 75 6B
      000597 00                    1166 	.db 0x00
      000598                       1167 __str_1:
      000598 4D 61 73 74 65 72 20  1168 	.ascii "Master Blaster"
             42 6C 61 73 74 65 72
      0005A6 00                    1169 	.db 0x00
      0005A7                       1170 __str_2:
      0005A7 47 72 61 62 20 61 20  1171 	.ascii "Grab a friend and jump into endless bombastic fun!"
             66 72 69 65 6E 64 20
             61 6E 64 20 6A 75 6D
             70 20 69 6E 74 6F 20
             65 6E 64 6C 65 73 73
             20 62 6F 6D 62 61 73
             74 69 63 20 66 75 6E
             21
      0005D9 00                    1172 	.db 0x00
                                   1173 	.area _INITIALIZER
      000000                       1174 __xinit__MAX_FRAMES:
      000000 20                    1175 	.db #0x20	; 32
                                   1176 	.area _CABS (ABS)
      007FF0                       1177 	.org 0x7FF0
      007FF0                       1178 ___SMS__SEGA_signature:
      007FF0 54                    1179 	.db #0x54	; 84	'T'
      007FF1 4D                    1180 	.db #0x4d	; 77	'M'
      007FF2 52                    1181 	.db #0x52	; 82	'R'
      007FF3 20                    1182 	.db #0x20	; 32
      007FF4 53                    1183 	.db #0x53	; 83	'S'
      007FF5 45                    1184 	.db #0x45	; 69	'E'
      007FF6 47                    1185 	.db #0x47	; 71	'G'
      007FF7 41                    1186 	.db #0x41	; 65	'A'
      007FF8 FF                    1187 	.db #0xff	; 255
      007FF9 FF                    1188 	.db #0xff	; 255
      007FFA FF                    1189 	.db #0xff	; 255
      007FFB FF                    1190 	.db #0xff	; 255
      007FFC 99                    1191 	.db #0x99	; 153
      007FFD 99                    1192 	.db #0x99	; 153
      007FFE 00                    1193 	.db #0x00	; 0
      007FFF 4C                    1194 	.db #0x4c	; 76	'L'
      007FD5                       1195 	.org 0x7FD5
      007FD5                       1196 ___SMS__SDSC_author:
      007FD5 47 61 72 79 20 50 61  1197 	.ascii "Gary Paluk"
             6C 75 6B
      007FDF 00                    1198 	.db 0x00
      007FC6                       1199 	.org 0x7FC6
      007FC6                       1200 ___SMS__SDSC_name:
      007FC6 4D 61 73 74 65 72 20  1201 	.ascii "Master Blaster"
             42 6C 61 73 74 65 72
      007FD4 00                    1202 	.db 0x00
      007F93                       1203 	.org 0x7F93
      007F93                       1204 ___SMS__SDSC_descr:
      007F93 47 72 61 62 20 61 20  1205 	.ascii "Grab a friend and jump into endless bombastic fun!"
             66 72 69 65 6E 64 20
             61 6E 64 20 6A 75 6D
             70 20 69 6E 74 6F 20
             65 6E 64 6C 65 73 73
             20 62 6F 6D 62 61 73
             74 69 63 20 66 75 6E
             21
      007FC5 00                    1206 	.db 0x00
      007FE0                       1207 	.org 0x7FE0
      007FE0                       1208 ___SMS__SDSC_signature:
      007FE0 53                    1209 	.db #0x53	; 83	'S'
      007FE1 44                    1210 	.db #0x44	; 68	'D'
      007FE2 53                    1211 	.db #0x53	; 83	'S'
      007FE3 43                    1212 	.db #0x43	; 67	'C'
      007FE4 01                    1213 	.db #0x01	; 1
      007FE5 00                    1214 	.db #0x00	; 0
      007FE6 11                    1215 	.db #0x11	; 17
      007FE7 07                    1216 	.db #0x07	; 7
      007FE8 22                    1217 	.db #0x22	; 34
      007FE9 20                    1218 	.db #0x20	; 32
      007FEA D5                    1219 	.db #0xd5	; 213
      007FEB 7F                    1220 	.db #0x7f	; 127
      007FEC C6                    1221 	.db #0xc6	; 198
      007FED 7F                    1222 	.db #0x7f	; 127
      007FEE 93                    1223 	.db #0x93	; 147
      007FEF 7F                    1224 	.db #0x7f	; 127
