                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.0 #9615 (MINGW64)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl ___SMS__SDSC_signature
                             12 	.globl ___SMS__SDSC_descr
                             13 	.globl ___SMS__SDSC_name
                             14 	.globl ___SMS__SDSC_author
                             15 	.globl ___SMS__SEGA_signature
                             16 	.globl _main
                             17 	.globl _loadGraphics2vram
                             18 	.globl _Player1Init
                             19 	.globl _InitConsole
                             20 	.globl _InterruptHandler
                             21 	.globl _PSGSFXFrame
                             22 	.globl _PSGFrame
                             23 	.globl _PSGSFXPlay
                             24 	.globl _PSGPlay
                             25 	.globl _SMS_setLineCounter
                             26 	.globl _SMS_setLineInterruptHandler
                             27 	.globl _SMS_getKeysStatus
                             28 	.globl _SMS_loadSpritePalette
                             29 	.globl _SMS_loadBGPalette
                             30 	.globl _SMS_setSpritePaletteColor
                             31 	.globl _SMS_setBGPaletteColor
                             32 	.globl _SMS_copySpritestoSAT
                             33 	.globl _SMS_finalizeSprites
                             34 	.globl _SMS_addSprite
                             35 	.globl _SMS_initSprites
                             36 	.globl _SMS_loadPSGaidencompressedTiles
                             37 	.globl _SMS_waitForVBlank
                             38 	.globl _SMS_VDPturnOnFeature
                             39 	.globl _SMS_init
                             40 	.globl _volume_atenuation
                             41 	.globl _frame_counter
                             42 	.globl _player1_direction
                             43 	.globl _player1_current_frame
                             44 	.globl _player1_y
                             45 	.globl _player1_x
                             46 	.globl _numinterrupts
                             47 	.globl _SMS_SRAM
                             48 	.globl _SRAM_bank_to_be_mapped_on_slot2
                             49 	.globl _ROM_bank_to_be_mapped_on_slot2
                             50 	.globl _Player1Update
                             51 	.globl _Player1UpdatePosition
                             52 	.globl _Player1UpdateDraw
                             53 ;--------------------------------------------------------
                             54 ; special function registers
                             55 ;--------------------------------------------------------
                             56 ;--------------------------------------------------------
                             57 ; ram data
                             58 ;--------------------------------------------------------
                             59 	.area _DATA
                     FFFF    60 _ROM_bank_to_be_mapped_on_slot2	=	0xffff
                     FFFC    61 _SRAM_bank_to_be_mapped_on_slot2	=	0xfffc
                     8000    62 _SMS_SRAM	=	0x8000
   0000                      63 _numinterrupts::
   0000                      64 	.ds 1
   0001                      65 _player1_x::
   0001                      66 	.ds 1
   0002                      67 _player1_y::
   0002                      68 	.ds 1
   0003                      69 _player1_current_frame::
   0003                      70 	.ds 1
   0004                      71 _player1_direction::
   0004                      72 	.ds 1
   0005                      73 _frame_counter::
   0005                      74 	.ds 1
   0006                      75 _volume_atenuation::
   0006                      76 	.ds 1
                             77 ;--------------------------------------------------------
                             78 ; ram data
                             79 ;--------------------------------------------------------
                             80 	.area _INITIALIZED
                             81 ;--------------------------------------------------------
                             82 ; absolute external ram data
                             83 ;--------------------------------------------------------
                             84 	.area _DABS (ABS)
                             85 ;--------------------------------------------------------
                             86 ; global & static initialisations
                             87 ;--------------------------------------------------------
                             88 	.area _HOME
                             89 	.area _GSINIT
                             90 	.area _GSFINAL
                             91 	.area _GSINIT
                             92 ;--------------------------------------------------------
                             93 ; Home
                             94 ;--------------------------------------------------------
                             95 	.area _HOME
                             96 	.area _HOME
                             97 ;--------------------------------------------------------
                             98 ; code
                             99 ;--------------------------------------------------------
                            100 	.area _CODE
                            101 ;Core\funcs.h:7: void InterruptHandler(void)
                            102 ;	---------------------------------
                            103 ; Function InterruptHandler
                            104 ; ---------------------------------
   0000                     105 _InterruptHandler::
                            106 ;Core\funcs.h:10: }
   0000 C9            [10]  107 	ret
                            108 ;Core\funcs.h:12: void InitConsole(void)
                            109 ;	---------------------------------
                            110 ; Function InitConsole
                            111 ; ---------------------------------
   0001                     112 _InitConsole::
                            113 ;Core\funcs.h:15: SMS_init();
   0001 CDr00r00      [17]  114 	call	_SMS_init
                            115 ;Core\funcs.h:18: SMS_getKeysStatus();
   0004 CDr00r00      [17]  116 	call	_SMS_getKeysStatus
                            117 ;Core\funcs.h:21: SMS_setLineInterruptHandler(&InterruptHandler);
   0007 21r00r00      [10]  118 	ld	hl,#_InterruptHandler
   000A E5            [11]  119 	push	hl
   000B CDr00r00      [17]  120 	call	_SMS_setLineInterruptHandler
                            121 ;Core\funcs.h:22: SMS_setLineCounter (192);
   000E 26 C0         [ 7]  122 	ld	h,#0xc0
   0010 E3            [19]  123 	ex	(sp),hl
   0011 33            [ 6]  124 	inc	sp
   0012 CDr00r00      [17]  125 	call	_SMS_setLineCounter
   0015 33            [ 6]  126 	inc	sp
                            127 ;Core\funcs.h:23: SMS_enableLineInterrupt();
   0016 21 10 00      [10]  128 	ld	hl,#0x0010
   0019 CDr00r00      [17]  129 	call	_SMS_VDPturnOnFeature
                            130 ;Core\funcs.h:26: SMS_VDPturnOnFeature(VDPFEATURE_LEFTCOLBLANK);
   001C 21 20 00      [10]  131 	ld	hl,#0x0020
   001F C3r00r00      [10]  132 	jp  _SMS_VDPturnOnFeature
                            133 ;Players/players.h:16: void Player1Init()
                            134 ;	---------------------------------
                            135 ; Function Player1Init
                            136 ; ---------------------------------
   0022                     137 _Player1Init::
                            138 ;Players/players.h:18: player1_direction = LEFT;
   0022 21r04r00      [10]  139 	ld	hl,#_player1_direction + 0
   0025 36 02         [10]  140 	ld	(hl), #0x02
                            141 ;Players/players.h:19: player1_x = 50;
   0027 21r01r00      [10]  142 	ld	hl,#_player1_x + 0
   002A 36 32         [10]  143 	ld	(hl), #0x32
                            144 ;Players/players.h:20: player1_y = 134;
   002C 21r02r00      [10]  145 	ld	hl,#_player1_y + 0
   002F 36 86         [10]  146 	ld	(hl), #0x86
                            147 ;Players/players.h:21: player1_current_frame = 0;
   0031 21r03r00      [10]  148 	ld	hl,#_player1_current_frame + 0
   0034 36 00         [10]  149 	ld	(hl), #0x00
   0036 C9            [10]  150 	ret
                            151 ;Players/players.h:24: void Player1Update(unsigned char time)
                            152 ;	---------------------------------
                            153 ; Function Player1Update
                            154 ; ---------------------------------
   0037                     155 _Player1Update::
                            156 ;Players/players.h:26: Player1UpdatePosition();
   0037 CDr46r00      [17]  157 	call	_Player1UpdatePosition
                            158 ;Players/players.h:27: Player1UpdateDraw(time);
   003A 21 02 00      [10]  159 	ld	hl, #2+0
   003D 39            [11]  160 	add	hl, sp
   003E 7E            [ 7]  161 	ld	a, (hl)
   003F F5            [11]  162 	push	af
   0040 33            [ 6]  163 	inc	sp
   0041 CDr89r00      [17]  164 	call	_Player1UpdateDraw
   0044 33            [ 6]  165 	inc	sp
   0045 C9            [10]  166 	ret
                            167 ;Players/players.h:30: void Player1UpdatePosition()
                            168 ;	---------------------------------
                            169 ; Function Player1UpdatePosition
                            170 ; ---------------------------------
   0046                     171 _Player1UpdatePosition::
                            172 ;Players/players.h:32: if(SMS_getKeysStatus() & PORT_A_KEY_UP)
   0046 CDr00r00      [17]  173 	call	_SMS_getKeysStatus
   0049 CB 45         [ 8]  174 	bit	0, l
   004B 28 0B         [12]  175 	jr	Z,00104$
                            176 ;Players/players.h:34: player1_direction = UP;
   004D 21r04r00      [10]  177 	ld	hl,#_player1_direction + 0
   0050 36 00         [10]  178 	ld	(hl), #0x00
                            179 ;Players/players.h:35: player1_y--;
   0052 21r02r00      [10]  180 	ld	hl, #_player1_y+0
   0055 35            [11]  181 	dec	(hl)
   0056 18 10         [12]  182 	jr	00105$
   0058                     183 00104$:
                            184 ;Players/players.h:37: else if(SMS_getKeysStatus() & PORT_A_KEY_DOWN)
   0058 CDr00r00      [17]  185 	call	_SMS_getKeysStatus
   005B CB 4D         [ 8]  186 	bit	1, l
   005D 28 09         [12]  187 	jr	Z,00105$
                            188 ;Players/players.h:39: player1_direction = DOWN;
   005F 21r04r00      [10]  189 	ld	hl,#_player1_direction + 0
   0062 36 01         [10]  190 	ld	(hl), #0x01
                            191 ;Players/players.h:40: player1_y++;
   0064 21r02r00      [10]  192 	ld	hl, #_player1_y+0
   0067 34            [11]  193 	inc	(hl)
   0068                     194 00105$:
                            195 ;Players/players.h:43: if(SMS_getKeysStatus() & PORT_A_KEY_LEFT)
   0068 CDr00r00      [17]  196 	call	_SMS_getKeysStatus
   006B CB 55         [ 8]  197 	bit	2, l
   006D 28 0A         [12]  198 	jr	Z,00109$
                            199 ;Players/players.h:45: player1_direction = LEFT;
   006F 21r04r00      [10]  200 	ld	hl,#_player1_direction + 0
   0072 36 02         [10]  201 	ld	(hl), #0x02
                            202 ;Players/players.h:46: player1_x--;
   0074 21r01r00      [10]  203 	ld	hl, #_player1_x+0
   0077 35            [11]  204 	dec	(hl)
   0078 C9            [10]  205 	ret
   0079                     206 00109$:
                            207 ;Players/players.h:48: else if(SMS_getKeysStatus() & PORT_A_KEY_RIGHT)
   0079 CDr00r00      [17]  208 	call	_SMS_getKeysStatus
   007C CB 5D         [ 8]  209 	bit	3, l
   007E C8            [11]  210 	ret	Z
                            211 ;Players/players.h:50: player1_direction = RIGHT;
   007F 21r04r00      [10]  212 	ld	hl,#_player1_direction + 0
   0082 36 03         [10]  213 	ld	(hl), #0x03
                            214 ;Players/players.h:51: player1_x++;
   0084 21r01r00      [10]  215 	ld	hl, #_player1_x+0
   0087 34            [11]  216 	inc	(hl)
   0088 C9            [10]  217 	ret
                            218 ;Players/players.h:55: void Player1UpdateDraw(unsigned char time)
                            219 ;	---------------------------------
                            220 ; Function Player1UpdateDraw
                            221 ; ---------------------------------
   0089                     222 _Player1UpdateDraw::
   0089 DD E5         [15]  223 	push	ix
   008B DD 21 00 00   [14]  224 	ld	ix,#0
   008F DD 39         [15]  225 	add	ix,sp
   0091 F5            [11]  226 	push	af
   0092 3B            [ 6]  227 	dec	sp
                            228 ;Players/players.h:58: unsigned char direction_offset = 0;
   0093 0E 00         [ 7]  229 	ld	c,#0x00
                            230 ;Players/players.h:60: if(player1_direction == LEFT)
   0095 3Ar04r00      [13]  231 	ld	a,(#_player1_direction + 0)
   0098 D6 02         [ 7]  232 	sub	a, #0x02
   009A 20 04         [12]  233 	jr	NZ,00104$
                            234 ;Players/players.h:62: direction_offset = PLAYER1_NUMBER_TILES_FRAMES_BOTH_DIRECTIONS >> 1;
   009C 0E 06         [ 7]  235 	ld	c,#0x06
   009E 18 08         [12]  236 	jr	00122$
   00A0                     237 00104$:
                            238 ;Players/players.h:64: else if(player1_direction == RIGHT)
   00A0 3Ar04r00      [13]  239 	ld	a,(#_player1_direction + 0)
                            240 ;Players/players.h:66: direction_offset = 0;
   00A3 D6 03         [ 7]  241 	sub	a,#0x03
   00A5 20 01         [12]  242 	jr	NZ,00122$
   00A7 4F            [ 4]  243 	ld	c,a
                            244 ;Players/players.h:69: for(j=0; j<3; j++)
   00A8                     245 00122$:
   00A8 DD 36 FD 00   [19]  246 	ld	-3 (ix),#0x00
   00AC 1E 00         [ 7]  247 	ld	e,#0x00
                            248 ;Players/players.h:71: for(i=0; i<2; i++) {
   00AE                     249 00120$:
   00AE DD 7E FD      [19]  250 	ld	a,-3 (ix)
   00B1 07            [ 4]  251 	rlca
   00B2 07            [ 4]  252 	rlca
   00B3 07            [ 4]  253 	rlca
   00B4 E6 F8         [ 7]  254 	and	a,#0xf8
   00B6 DD 77 FF      [19]  255 	ld	-1 (ix),a
   00B9 DD 36 FE 00   [19]  256 	ld	-2 (ix),#0x00
   00BD                     257 00112$:
                            258 ;Players/players.h:72: SMS_addSprite(player1_x+(i<<3), player1_y+(j<<3), PLAYER1_SPRITE_TILES_POSITION + direction_offset + player1_current_frame * PLAYER1_NUMBER_TILES_BY_FRAME + PLAYER1_NUMBER_TILES_FRAMES_BOTH_DIRECTIONS *j + i);
   00BD 3Ar03r00      [13]  259 	ld	a,(#_player1_current_frame + 0)
   00C0 87            [ 4]  260 	add	a, a
   00C1 6F            [ 4]  261 	ld	l,a
   00C2 09            [11]  262 	add	hl, bc
   00C3 19            [11]  263 	add	hl, de
   00C4 7D            [ 4]  264 	ld	a,l
   00C5 DD 86 FE      [19]  265 	add	a, -2 (ix)
   00C8 47            [ 4]  266 	ld	b,a
   00C9 3Ar02r00      [13]  267 	ld	a,(#_player1_y + 0)
   00CC DD 86 FF      [19]  268 	add	a, -1 (ix)
   00CF 57            [ 4]  269 	ld	d,a
   00D0 DD 7E FE      [19]  270 	ld	a,-2 (ix)
   00D3 07            [ 4]  271 	rlca
   00D4 07            [ 4]  272 	rlca
   00D5 07            [ 4]  273 	rlca
   00D6 E6 F8         [ 7]  274 	and	a,#0xf8
   00D8 6F            [ 4]  275 	ld	l,a
   00D9 3Ar01r00      [13]  276 	ld	a,(#_player1_x + 0)
   00DC 85            [ 4]  277 	add	a, l
   00DD C5            [11]  278 	push	bc
   00DE D5            [11]  279 	push	de
   00DF 4A            [ 4]  280 	ld	c, d
   00E0 C5            [11]  281 	push	bc
   00E1 F5            [11]  282 	push	af
   00E2 33            [ 6]  283 	inc	sp
   00E3 CDr00r00      [17]  284 	call	_SMS_addSprite
   00E6 F1            [10]  285 	pop	af
   00E7 33            [ 6]  286 	inc	sp
   00E8 D1            [10]  287 	pop	de
   00E9 C1            [10]  288 	pop	bc
                            289 ;Players/players.h:71: for(i=0; i<2; i++) {
   00EA DD 34 FE      [23]  290 	inc	-2 (ix)
   00ED DD 7E FE      [19]  291 	ld	a,-2 (ix)
   00F0 D6 02         [ 7]  292 	sub	a, #0x02
   00F2 38 C9         [12]  293 	jr	C,00112$
                            294 ;Players/players.h:69: for(j=0; j<3; j++)
   00F4 7B            [ 4]  295 	ld	a,e
   00F5 C6 0C         [ 7]  296 	add	a, #0x0c
   00F7 5F            [ 4]  297 	ld	e,a
   00F8 DD 34 FD      [23]  298 	inc	-3 (ix)
   00FB DD 7E FD      [19]  299 	ld	a,-3 (ix)
   00FE D6 03         [ 7]  300 	sub	a, #0x03
   0100 38 AC         [12]  301 	jr	C,00120$
                            302 ;Players/players.h:78: if((time%8) == 0) {
   0102 DD 7E 04      [19]  303 	ld	a,4 (ix)
   0105 E6 07         [ 7]  304 	and	a, #0x07
   0107 20 12         [12]  305 	jr	NZ,00116$
                            306 ;Players/players.h:79: player1_current_frame++;
   0109 FD 21r03r00   [14]  307 	ld	iy,#_player1_current_frame
   010D FD 34 00      [23]  308 	inc	0 (iy)
                            309 ;Players/players.h:80: if(player1_current_frame == PLAYER1_NUMBER_FRAMES) {
   0110 FD 7E 00      [19]  310 	ld	a,0 (iy)
   0113 D6 06         [ 7]  311 	sub	a, #0x06
   0115 20 04         [12]  312 	jr	NZ,00116$
                            313 ;Players/players.h:81: player1_current_frame = 0;
   0117 FD 36 00 00   [19]  314 	ld	0 (iy),#0x00
   011B                     315 00116$:
   011B DD F9         [10]  316 	ld	sp, ix
   011D DD E1         [14]  317 	pop	ix
   011F C9            [10]  318 	ret
                            319 ;main.c:7: void loadGraphics2vram(void)
                            320 ;	---------------------------------
                            321 ; Function loadGraphics2vram
                            322 ; ---------------------------------
   0120                     323 _loadGraphics2vram::
                            324 ;main.c:9: SMS_loadBGPalette(backgroundpalette_bin);
   0120 21r00r00      [10]  325 	ld	hl,#_backgroundpalette_bin
   0123 CDr00r00      [17]  326 	call	_SMS_loadBGPalette
                            327 ;main.c:13: SMS_loadSpritePalette(spritepalette_bin);
   0126 21r00r00      [10]  328 	ld	hl,#_spritepalette_bin
   0129 CDr00r00      [17]  329 	call	_SMS_loadSpritePalette
                            330 ;main.c:14: SMS_loadPSGaidencompressedTiles (spritetiles_psgcompr,PLAYER1_SPRITE_TILES_POSITION); // Bomberman - move to player?
   012C 21 00 01      [10]  331 	ld	hl,#0x0100
   012F E5            [11]  332 	push	hl
   0130 21r00r00      [10]  333 	ld	hl,#_spritetiles_psgcompr
   0133 E5            [11]  334 	push	hl
   0134 CDr00r00      [17]  335 	call	_SMS_loadPSGaidencompressedTiles
   0137 F1            [10]  336 	pop	af
                            337 ;main.c:16: SMS_setSpritePaletteColor(0, RGB(3, 0, 0));
   0138 21 00 03      [10]  338 	ld	hl, #0x0300
   013B E3            [19]  339 	ex	(sp),hl
   013C CDr00r00      [17]  340 	call	_SMS_setSpritePaletteColor
                            341 ;main.c:17: SMS_setBGPaletteColor(0, RGB(0, 3, 0));
   013F 21 00 0C      [10]  342 	ld	hl, #0x0c00
   0142 E3            [19]  343 	ex	(sp),hl
   0143 CDr00r00      [17]  344 	call	_SMS_setBGPaletteColor
   0146 F1            [10]  345 	pop	af
   0147 C9            [10]  346 	ret
                            347 ;main.c:20: void main (void)
                            348 ;	---------------------------------
                            349 ; Function main
                            350 ; ---------------------------------
   0148                     351 _main::
                            352 ;main.c:22: frame_counter = 0;
   0148 21r05r00      [10]  353 	ld	hl,#_frame_counter + 0
   014B 36 00         [10]  354 	ld	(hl), #0x00
                            355 ;main.c:24: Player1Init();
   014D CDr22r00      [17]  356 	call	_Player1Init
                            357 ;main.c:25: InitConsole();
   0150 CDr01r00      [17]  358 	call	_InitConsole
                            359 ;main.c:27: loadGraphics2vram();
   0153 CDr20r01      [17]  360 	call	_loadGraphics2vram
                            361 ;main.c:28: SMS_displayOn();
   0156 21 40 01      [10]  362 	ld	hl,#0x0140
   0159 CDr00r00      [17]  363 	call	_SMS_VDPturnOnFeature
                            364 ;main.c:30: PSGPlay(music_psg);
   015C 21r00r00      [10]  365 	ld	hl,#_music_psg
   015F E5            [11]  366 	push	hl
   0160 CDr00r00      [17]  367 	call	_PSGPlay
   0163 F1            [10]  368 	pop	af
                            369 ;main.c:33: while (1)
   0164                     370 00108$:
                            371 ;main.c:35: frame_counter++;
   0164 FD 21r05r00   [14]  372 	ld	iy,#_frame_counter
   0168 FD 34 00      [23]  373 	inc	0 (iy)
                            374 ;main.c:37: if((frame_counter%64) == 0)
   016B FD 7E 00      [19]  375 	ld	a,0 (iy)
   016E E6 3F         [ 7]  376 	and	a, #0x3f
   0170 20 12         [12]  377 	jr	NZ,00104$
                            378 ;main.c:39: volume_atenuation++;
   0172 FD 21r06r00   [14]  379 	ld	iy,#_volume_atenuation
   0176 FD 34 00      [23]  380 	inc	0 (iy)
                            381 ;main.c:40: if(volume_atenuation > 15)
   0179 3E 0F         [ 7]  382 	ld	a,#0x0f
   017B FD 96 00      [19]  383 	sub	a, 0 (iy)
   017E 30 04         [12]  384 	jr	NC,00104$
                            385 ;main.c:42: volume_atenuation = 0;
   0180 FD 36 00 00   [19]  386 	ld	0 (iy),#0x00
   0184                     387 00104$:
                            388 ;main.c:46: SMS_initSprites();
   0184 CDr00r00      [17]  389 	call	_SMS_initSprites
                            390 ;main.c:48: Player1Update(frame_counter);
   0187 3Ar05r00      [13]  391 	ld	a,(_frame_counter)
   018A F5            [11]  392 	push	af
   018B 33            [ 6]  393 	inc	sp
   018C CDr37r00      [17]  394 	call	_Player1Update
   018F 33            [ 6]  395 	inc	sp
                            396 ;main.c:50: if(SMS_getKeysStatus() & PORT_A_KEY_1)
   0190 CDr00r00      [17]  397 	call	_SMS_getKeysStatus
   0193 CB 65         [ 8]  398 	bit	4, l
   0195 28 0C         [12]  399 	jr	Z,00106$
                            400 ;main.c:52: PSGSFXPlay(enemybomb_psg, 0x00);
   0197 AF            [ 4]  401 	xor	a, a
   0198 F5            [11]  402 	push	af
   0199 33            [ 6]  403 	inc	sp
   019A 21r00r00      [10]  404 	ld	hl,#_enemybomb_psg
   019D E5            [11]  405 	push	hl
   019E CDr00r00      [17]  406 	call	_PSGSFXPlay
   01A1 F1            [10]  407 	pop	af
   01A2 33            [ 6]  408 	inc	sp
   01A3                     409 00106$:
                            410 ;main.c:55: SMS_finalizeSprites();
   01A3 CDr00r00      [17]  411 	call	_SMS_finalizeSprites
                            412 ;main.c:56: SMS_waitForVBlank();
   01A6 CDr00r00      [17]  413 	call	_SMS_waitForVBlank
                            414 ;main.c:58: PSGFrame();
   01A9 CDr00r00      [17]  415 	call	_PSGFrame
                            416 ;main.c:59: PSGSFXFrame();
   01AC CDr00r00      [17]  417 	call	_PSGSFXFrame
                            418 ;main.c:61: SMS_copySpritestoSAT();
   01AF CDr00r00      [17]  419 	call	_SMS_copySpritestoSAT
   01B2 18 B0         [12]  420 	jr	00108$
                            421 	.area _CODE
   01B4                     422 __str_0:
   01B4 47 61 72 79 20 50   423 	.ascii "Gary Paluk"
        61 6C 75 6B
   01BE 00                  424 	.db 0x00
   01BF                     425 __str_1:
   01BF 4D 61 73 74 65 72   426 	.ascii "Master Blaster"
        20 42 6C 61 73 74
        65 72
   01CD 00                  427 	.db 0x00
   01CE                     428 __str_2:
   01CE 47 72 61 62 20 61   429 	.ascii "Grab a friend and jump into endless bombastic fun."
        20 66 72 69 65 6E
        64 20 61 6E 64 20
        6A 75 6D 70 20 69
        6E 74 6F 20 65 6E
        64 6C 65 73 73 20
        62 6F 6D 62 61 73
        74 69 63 20 66 75
        6E 2E
   0200 00                  430 	.db 0x00
                            431 	.area _INITIALIZER
                            432 	.area _CABS (ABS)
   7FF0                     433 	.org 0x7FF0
   7FF0                     434 ___SMS__SEGA_signature:
   7FF0 54                  435 	.db #0x54	; 84	'T'
   7FF1 4D                  436 	.db #0x4d	; 77	'M'
   7FF2 52                  437 	.db #0x52	; 82	'R'
   7FF3 20                  438 	.db #0x20	; 32
   7FF4 53                  439 	.db #0x53	; 83	'S'
   7FF5 45                  440 	.db #0x45	; 69	'E'
   7FF6 47                  441 	.db #0x47	; 71	'G'
   7FF7 41                  442 	.db #0x41	; 65	'A'
   7FF8 FF                  443 	.db #0xff	; 255
   7FF9 FF                  444 	.db #0xff	; 255
   7FFA FF                  445 	.db #0xff	; 255
   7FFB FF                  446 	.db #0xff	; 255
   7FFC 99                  447 	.db #0x99	; 153
   7FFD 99                  448 	.db #0x99	; 153
   7FFE 00                  449 	.db #0x00	; 0
   7FFF 4C                  450 	.db #0x4c	; 76	'L'
   7FD5                     451 	.org 0x7FD5
   7FD5                     452 ___SMS__SDSC_author:
   7FD5 47 61 72 79 20 50   453 	.ascii "Gary Paluk"
        61 6C 75 6B
   7FDF 00                  454 	.db 0x00
   7FC6                     455 	.org 0x7FC6
   7FC6                     456 ___SMS__SDSC_name:
   7FC6 4D 61 73 74 65 72   457 	.ascii "Master Blaster"
        20 42 6C 61 73 74
        65 72
   7FD4 00                  458 	.db 0x00
   7F93                     459 	.org 0x7F93
   7F93                     460 ___SMS__SDSC_descr:
   7F93 47 72 61 62 20 61   461 	.ascii "Grab a friend and jump into endless bombastic fun."
        20 66 72 69 65 6E
        64 20 61 6E 64 20
        6A 75 6D 70 20 69
        6E 74 6F 20 65 6E
        64 6C 65 73 73 20
        62 6F 6D 62 61 73
        74 69 63 20 66 75
        6E 2E
   7FC5 00                  462 	.db 0x00
   7FE0                     463 	.org 0x7FE0
   7FE0                     464 ___SMS__SDSC_signature:
   7FE0 53                  465 	.db #0x53	; 83	'S'
   7FE1 44                  466 	.db #0x44	; 68	'D'
   7FE2 53                  467 	.db #0x53	; 83	'S'
   7FE3 43                  468 	.db #0x43	; 67	'C'
   7FE4 01                  469 	.db #0x01	; 1
   7FE5 00                  470 	.db #0x00	; 0
   7FE6 11                  471 	.db #0x11	; 17
   7FE7 07                  472 	.db #0x07	; 7
   7FE8 22                  473 	.db #0x22	; 34
   7FE9 20                  474 	.db #0x20	; 32
   7FEA D5                  475 	.db #0xd5	; 213
   7FEB 7F                  476 	.db #0x7f	; 127
   7FEC C6                  477 	.db #0xc6	; 198
   7FED 7F                  478 	.db #0x7f	; 127
   7FEE 93                  479 	.db #0x93	; 147
   7FEF 7F                  480 	.db #0x7f	; 127
