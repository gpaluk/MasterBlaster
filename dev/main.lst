                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___SMS__SDSC_signature
                                     12 	.globl ___SMS__SDSC_descr
                                     13 	.globl ___SMS__SDSC_name
                                     14 	.globl ___SMS__SDSC_author
                                     15 	.globl ___SMS__SEGA_signature
                                     16 	.globl _main
                                     17 	.globl _loadGraphics2vram
                                     18 	.globl _Player1Init
                                     19 	.globl _checkgamepause
                                     20 	.globl _InitConsole
                                     21 	.globl _InterruptHandler
                                     22 	.globl _PSGSFXFrame
                                     23 	.globl _PSGFrame
                                     24 	.globl _PSGSFXGetStatus
                                     25 	.globl _PSGPlayNoRepeat
                                     26 	.globl _PSGPlay
                                     27 	.globl _SMS_VRAMmemsetW
                                     28 	.globl _SMS_VRAMmemcpy
                                     29 	.globl _SMS_setLineCounter
                                     30 	.globl _SMS_setLineInterruptHandler
                                     31 	.globl _SMS_resetPauseRequest
                                     32 	.globl _SMS_queryPauseRequested
                                     33 	.globl _SMS_getKeysStatus
                                     34 	.globl _SMS_loadSpritePalette
                                     35 	.globl _SMS_loadBGPalette
                                     36 	.globl _SMS_setSpritePaletteColor
                                     37 	.globl _SMS_setBGPaletteColor
                                     38 	.globl _SMS_copySpritestoSAT
                                     39 	.globl _SMS_finalizeSprites
                                     40 	.globl _SMS_addSprite_f
                                     41 	.globl _SMS_initSprites
                                     42 	.globl _SMS_loadPSGaidencompressedTilesatAddr
                                     43 	.globl _SMS_waitForVBlank
                                     44 	.globl _SMS_VDPturnOnFeature
                                     45 	.globl _SMS_init
                                     46 	.globl _volume_atenuation
                                     47 	.globl _frame_counter
                                     48 	.globl _player_direction_offset
                                     49 	.globl _player_direction
                                     50 	.globl _player_current_frame
                                     51 	.globl _player_y
                                     52 	.globl _player_x
                                     53 	.globl _sprite_size
                                     54 	.globl _gamepause
                                     55 	.globl _numinterrupts
                                     56 	.globl _SMS_SRAM
                                     57 	.globl _SRAM_bank_to_be_mapped_on_slot2
                                     58 	.globl _ROM_bank_to_be_mapped_on_slot0
                                     59 	.globl _ROM_bank_to_be_mapped_on_slot1
                                     60 	.globl _ROM_bank_to_be_mapped_on_slot2
                                     61 	.globl _Player1Update
                                     62 	.globl _Player1UpdatePosition
                                     63 	.globl _Player1UpdateDraw
                                     64 ;--------------------------------------------------------
                                     65 ; special function registers
                                     66 ;--------------------------------------------------------
                                     67 ;--------------------------------------------------------
                                     68 ; ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area _DATA
                           00FFFF    71 _ROM_bank_to_be_mapped_on_slot2	=	0xffff
                           00FFFE    72 _ROM_bank_to_be_mapped_on_slot1	=	0xfffe
                           00FFFD    73 _ROM_bank_to_be_mapped_on_slot0	=	0xfffd
                           00FFFC    74 _SRAM_bank_to_be_mapped_on_slot2	=	0xfffc
                           008000    75 _SMS_SRAM	=	0x8000
      000000                         76 _numinterrupts::
      000000                         77 	.ds 1
      000001                         78 _gamepause::
      000001                         79 	.ds 1
      000002                         80 _sprite_size::
      000002                         81 	.ds 2
      000004                         82 _player_x::
      000004                         83 	.ds 1
      000005                         84 _player_y::
      000005                         85 	.ds 1
      000006                         86 _player_current_frame::
      000006                         87 	.ds 1
      000007                         88 _player_direction::
      000007                         89 	.ds 1
      000008                         90 _player_direction_offset::
      000008                         91 	.ds 1
      000009                         92 _frame_counter::
      000009                         93 	.ds 1
      00000A                         94 _volume_atenuation::
      00000A                         95 	.ds 1
                                     96 ;--------------------------------------------------------
                                     97 ; ram data
                                     98 ;--------------------------------------------------------
                                     99 	.area _INITIALIZED
                                    100 ;--------------------------------------------------------
                                    101 ; absolute external ram data
                                    102 ;--------------------------------------------------------
                                    103 	.area _DABS (ABS)
                                    104 ;--------------------------------------------------------
                                    105 ; global & static initialisations
                                    106 ;--------------------------------------------------------
                                    107 	.area _HOME
                                    108 	.area _GSINIT
                                    109 	.area _GSFINAL
                                    110 	.area _GSINIT
                                    111 ;--------------------------------------------------------
                                    112 ; Home
                                    113 ;--------------------------------------------------------
                                    114 	.area _HOME
                                    115 	.area _HOME
                                    116 ;--------------------------------------------------------
                                    117 ; code
                                    118 ;--------------------------------------------------------
                                    119 	.area _CODE
                                    120 ;Core\funcs.h:6: void InterruptHandler(void)
                                    121 ;	---------------------------------
                                    122 ; Function InterruptHandler
                                    123 ; ---------------------------------
      000000                        124 _InterruptHandler::
                                    125 ;Core\funcs.h:9: }
      000000 C9               [10]  126 	ret
                                    127 ;Core\funcs.h:11: void InitConsole(void)
                                    128 ;	---------------------------------
                                    129 ; Function InitConsole
                                    130 ; ---------------------------------
      000001                        131 _InitConsole::
                                    132 ;Core\funcs.h:14: SMS_init();
      000001 CDr00r00         [17]  133 	call	_SMS_init
                                    134 ;Core\funcs.h:17: SMS_getKeysStatus();
      000004 CDr00r00         [17]  135 	call	_SMS_getKeysStatus
                                    136 ;Core\funcs.h:20: SMS_setLineInterruptHandler(&InterruptHandler);
      000007 21r00r00         [10]  137 	ld	hl, #_InterruptHandler
      00000A CDr00r00         [17]  138 	call	_SMS_setLineInterruptHandler
                                    139 ;Core\funcs.h:21: SMS_setLineCounter (192);
      00000D 2E C0            [ 7]  140 	ld	l, #0xc0
                                    141 ;	spillPairReg hl
                                    142 ;	spillPairReg hl
      00000F CDr00r00         [17]  143 	call	_SMS_setLineCounter
                                    144 ;Core\funcs.h:22: SMS_enableLineInterrupt();
      000012 21 10 00         [10]  145 	ld	hl, #0x0010
      000015 CDr00r00         [17]  146 	call	_SMS_VDPturnOnFeature
                                    147 ;Core\funcs.h:25: SMS_VDPturnOnFeature(VDPFEATURE_LEFTCOLBLANK);
      000018 21 20 00         [10]  148 	ld	hl, #0x0020
                                    149 ;Core\funcs.h:26: }
      00001B C3r00r00         [10]  150 	jp	_SMS_VDPturnOnFeature
                                    151 ;Core\funcs.h:28: void checkgamepause()
                                    152 ;	---------------------------------
                                    153 ; Function checkgamepause
                                    154 ; ---------------------------------
      00001E                        155 _checkgamepause::
                                    156 ;Core\funcs.h:30: if(SMS_queryPauseRequested())
      00001E CDr00r00         [17]  157 	call	_SMS_queryPauseRequested
      000021 CB 47            [ 8]  158 	bit	0,a
      000023 C8               [11]  159 	ret	Z
                                    160 ;Core\funcs.h:32: SMS_resetPauseRequest();
      000024 CDr00r00         [17]  161 	call	_SMS_resetPauseRequest
                                    162 ;Core\funcs.h:33: gamepause=1-gamepause;
      000027 3Ar01r00         [13]  163 	ld	a, (_gamepause+0)
      00002A 4F               [ 4]  164 	ld	c, a
      00002B 21r01r00         [10]  165 	ld	hl, #_gamepause
      00002E 3E 01            [ 7]  166 	ld	a, #0x01
      000030 91               [ 4]  167 	sub	a, c
      000031 77               [ 7]  168 	ld	(hl), a
                                    169 ;Core\funcs.h:34: if(gamepause==1)
      000032 3Ar01r00         [13]  170 	ld	a, (_gamepause+0)
      000035 3D               [ 4]  171 	dec	a
      000036 20 06            [12]  172 	jr	NZ, 00102$
                                    173 ;Core\funcs.h:35: PSGPlayNoRepeat(pause_psg);
      000038 21r00r00         [10]  174 	ld	hl, #_pause_psg
      00003B C3r00r00         [10]  175 	jp	_PSGPlayNoRepeat
      00003E                        176 00102$:
                                    177 ;Core\funcs.h:37: PSGPlay(music_psg);
      00003E 21r00r00         [10]  178 	ld	hl, #_music_psg
                                    179 ;Core\funcs.h:39: }
      000041 C3r00r00         [10]  180 	jp	_PSGPlay
                                    181 ;Players/players.h:26: void Player1Init()
                                    182 ;	---------------------------------
                                    183 ; Function Player1Init
                                    184 ; ---------------------------------
      000044                        185 _Player1Init::
                                    186 ;Players/players.h:28: sprite_size = 32*6*12;
      000044 21 00 09         [10]  187 	ld	hl, #0x0900
      000047 22r02r00         [16]  188 	ld	(_sprite_size), hl
                                    189 ;Players/players.h:29: player_x = 128-8;
      00004A 21r04r00         [10]  190 	ld	hl, #_player_x
      00004D 36 78            [10]  191 	ld	(hl), #0x78
                                    192 ;Players/players.h:30: player_y = 96-12;
      00004F 21r05r00         [10]  193 	ld	hl, #_player_y
      000052 36 54            [10]  194 	ld	(hl), #0x54
                                    195 ;Players/players.h:31: player_direction = DOWN;
      000054 21r07r00         [10]  196 	ld	hl, #_player_direction
      000057 36 01            [10]  197 	ld	(hl), #0x01
                                    198 ;Players/players.h:32: player_current_frame = 0;
      000059 21r06r00         [10]  199 	ld	hl, #_player_current_frame
      00005C 36 00            [10]  200 	ld	(hl), #0x00
                                    201 ;Players/players.h:33: player_direction_offset = 0;
      00005E 21r08r00         [10]  202 	ld	hl, #_player_direction_offset
      000061 36 00            [10]  203 	ld	(hl), #0x00
                                    204 ;Players/players.h:34: }
      000063 C9               [10]  205 	ret
                                    206 ;Players/players.h:36: void Player1Update(unsigned char time)
                                    207 ;	---------------------------------
                                    208 ; Function Player1Update
                                    209 ; ---------------------------------
      000064                        210 _Player1Update::
      000064 4F               [ 4]  211 	ld	c, a
                                    212 ;Players/players.h:38: Player1UpdatePosition();
      000065 C5               [11]  213 	push	bc
      000066 CDr6Er00         [17]  214 	call	_Player1UpdatePosition
      000069 C1               [10]  215 	pop	bc
                                    216 ;Players/players.h:39: Player1UpdateDraw(time);
      00006A 79               [ 4]  217 	ld	a, c
                                    218 ;Players/players.h:40: }
      00006B C3r2Fr01         [10]  219 	jp	_Player1UpdateDraw
                                    220 ;Players/players.h:42: void Player1UpdatePosition()
                                    221 ;	---------------------------------
                                    222 ; Function Player1UpdatePosition
                                    223 ; ---------------------------------
      00006E                        224 _Player1UpdatePosition::
                                    225 ;Players/players.h:44: if(SMS_getKeysStatus() & PORT_A_KEY_UP)
      00006E CDr00r00         [17]  226 	call	_SMS_getKeysStatus
      000071 CB 43            [ 8]  227 	bit	0, e
      000073 28 27            [12]  228 	jr	Z, 00122$
                                    229 ;Players/players.h:46: if(player_direction != UP)
      000075 3Ar07r00         [13]  230 	ld	a, (_player_direction+0)
      000078 B7               [ 4]  231 	or	a, a
      000079 28 1C            [12]  232 	jr	Z, 00102$
                                    233 ;Players/players.h:48: SMS_loadTiles(spritetiles_up_bin, PLAYER1_SPRITE_POSITION, sprite_size);
      00007B 2Ar02r00         [16]  234 	ld	hl, (_sprite_size)
      00007E E5               [11]  235 	push	hl
      00007F 11r00r00         [10]  236 	ld	de, #_spritetiles_up_bin
      000082 21 00 60         [10]  237 	ld	hl, #0x6000
      000085 CDr00r00         [17]  238 	call	_SMS_VRAMmemcpy
                                    239 ;Players/players.h:49: player_direction = UP;
      000088 21r07r00         [10]  240 	ld	hl, #_player_direction
      00008B 36 00            [10]  241 	ld	(hl), #0x00
                                    242 ;Players/players.h:50: player_current_frame = 0;
      00008D 21r06r00         [10]  243 	ld	hl, #_player_current_frame
      000090 36 00            [10]  244 	ld	(hl), #0x00
                                    245 ;Players/players.h:51: player_direction_offset = 0;
      000092 21r08r00         [10]  246 	ld	hl, #_player_direction_offset
      000095 36 00            [10]  247 	ld	(hl), #0x00
      000097                        248 00102$:
                                    249 ;Players/players.h:53: player_y--;
      000097 21r05r00         [10]  250 	ld	hl, #_player_y
      00009A 35               [11]  251 	dec	(hl)
      00009B C9               [10]  252 	ret
      00009C                        253 00122$:
                                    254 ;Players/players.h:55: else if(SMS_getKeysStatus() & PORT_A_KEY_DOWN)
      00009C CDr00r00         [17]  255 	call	_SMS_getKeysStatus
      00009F CB 4B            [ 8]  256 	bit	1, e
      0000A1 28 27            [12]  257 	jr	Z, 00119$
                                    258 ;Players/players.h:57: if(player_direction != DOWN)
      0000A3 3Ar07r00         [13]  259 	ld	a, (_player_direction+0)
      0000A6 3D               [ 4]  260 	dec	a
      0000A7 28 1C            [12]  261 	jr	Z, 00104$
                                    262 ;Players/players.h:59: SMS_loadTiles(spritetiles_down_bin, PLAYER1_SPRITE_POSITION, sprite_size);
      0000A9 2Ar02r00         [16]  263 	ld	hl, (_sprite_size)
      0000AC E5               [11]  264 	push	hl
      0000AD 11r00r00         [10]  265 	ld	de, #_spritetiles_down_bin
      0000B0 21 00 60         [10]  266 	ld	hl, #0x6000
      0000B3 CDr00r00         [17]  267 	call	_SMS_VRAMmemcpy
                                    268 ;Players/players.h:60: player_direction = DOWN;
      0000B6 21r07r00         [10]  269 	ld	hl, #_player_direction
      0000B9 36 01            [10]  270 	ld	(hl), #0x01
                                    271 ;Players/players.h:61: player_current_frame = 0;
      0000BB 21r06r00         [10]  272 	ld	hl, #_player_current_frame
      0000BE 36 00            [10]  273 	ld	(hl), #0x00
                                    274 ;Players/players.h:62: player_direction_offset = 0;
      0000C0 21r08r00         [10]  275 	ld	hl, #_player_direction_offset
      0000C3 36 00            [10]  276 	ld	(hl), #0x00
      0000C5                        277 00104$:
                                    278 ;Players/players.h:64: player_y++;
      0000C5 21r05r00         [10]  279 	ld	hl, #_player_y
      0000C8 34               [11]  280 	inc	(hl)
      0000C9 C9               [10]  281 	ret
      0000CA                        282 00119$:
                                    283 ;Players/players.h:66: else if(SMS_getKeysStatus() & PORT_A_KEY_LEFT)
      0000CA CDr00r00         [17]  284 	call	_SMS_getKeysStatus
      0000CD CB 53            [ 8]  285 	bit	2, e
      0000CF 28 2C            [12]  286 	jr	Z, 00116$
                                    287 ;Players/players.h:68: if(player_direction != LEFT)
                                    288 ;Players/players.h:70: if(player_direction != RIGHT)
      0000D1 3Ar07r00         [13]  289 	ld	a,(_player_direction+0)
      0000D4 FE 02            [ 7]  290 	cp	a,#0x02
      0000D6 28 20            [12]  291 	jr	Z, 00108$
      0000D8 D6 03            [ 7]  292 	sub	a, #0x03
      0000DA 28 0D            [12]  293 	jr	Z, 00106$
                                    294 ;Players/players.h:72: SMS_loadTiles(spritetiles_lr_bin, PLAYER1_SPRITE_POSITION, sprite_size);
      0000DC 2Ar02r00         [16]  295 	ld	hl, (_sprite_size)
      0000DF E5               [11]  296 	push	hl
      0000E0 11r00r00         [10]  297 	ld	de, #_spritetiles_lr_bin
      0000E3 21 00 60         [10]  298 	ld	hl, #0x6000
      0000E6 CDr00r00         [17]  299 	call	_SMS_VRAMmemcpy
      0000E9                        300 00106$:
                                    301 ;Players/players.h:74: player_direction = LEFT;
      0000E9 21r07r00         [10]  302 	ld	hl, #_player_direction
      0000EC 36 02            [10]  303 	ld	(hl), #0x02
                                    304 ;Players/players.h:75: player_current_frame = 0;
      0000EE 21r06r00         [10]  305 	ld	hl, #_player_current_frame
      0000F1 36 00            [10]  306 	ld	(hl), #0x00
                                    307 ;Players/players.h:76: player_direction_offset = PLAYER_LR_NUMBER_TILES_FRAMES_BOTH_DIRECTIONS >> 1;
      0000F3 21r08r00         [10]  308 	ld	hl, #_player_direction_offset
      0000F6 36 0C            [10]  309 	ld	(hl), #0x0c
      0000F8                        310 00108$:
                                    311 ;Players/players.h:78: player_x--;
      0000F8 21r04r00         [10]  312 	ld	hl, #_player_x
      0000FB 35               [11]  313 	dec	(hl)
      0000FC C9               [10]  314 	ret
      0000FD                        315 00116$:
                                    316 ;Players/players.h:80: else if(SMS_getKeysStatus() & PORT_A_KEY_RIGHT)
      0000FD CDr00r00         [17]  317 	call	_SMS_getKeysStatus
      000100 CB 5B            [ 8]  318 	bit	3, e
      000102 C8               [11]  319 	ret	Z
                                    320 ;Players/players.h:82: if(player_direction != RIGHT)
                                    321 ;Players/players.h:84: if(player_direction != LEFT)
      000103 3Ar07r00         [13]  322 	ld	a,(_player_direction+0)
      000106 FE 03            [ 7]  323 	cp	a,#0x03
      000108 28 20            [12]  324 	jr	Z, 00112$
      00010A D6 02            [ 7]  325 	sub	a, #0x02
      00010C 28 0D            [12]  326 	jr	Z, 00110$
                                    327 ;Players/players.h:86: SMS_loadTiles(spritetiles_lr_bin, PLAYER1_SPRITE_POSITION, sprite_size);
      00010E 2Ar02r00         [16]  328 	ld	hl, (_sprite_size)
      000111 E5               [11]  329 	push	hl
      000112 11r00r00         [10]  330 	ld	de, #_spritetiles_lr_bin
      000115 21 00 60         [10]  331 	ld	hl, #0x6000
      000118 CDr00r00         [17]  332 	call	_SMS_VRAMmemcpy
      00011B                        333 00110$:
                                    334 ;Players/players.h:88: player_direction = RIGHT;
      00011B 21r07r00         [10]  335 	ld	hl, #_player_direction
      00011E 36 03            [10]  336 	ld	(hl), #0x03
                                    337 ;Players/players.h:89: player_current_frame = 0;
      000120 21r06r00         [10]  338 	ld	hl, #_player_current_frame
      000123 36 00            [10]  339 	ld	(hl), #0x00
                                    340 ;Players/players.h:90: player_direction_offset = 0;
      000125 21r08r00         [10]  341 	ld	hl, #_player_direction_offset
      000128 36 00            [10]  342 	ld	(hl), #0x00
      00012A                        343 00112$:
                                    344 ;Players/players.h:92: player_x++;
      00012A 21r04r00         [10]  345 	ld	hl, #_player_x
      00012D 34               [11]  346 	inc	(hl)
                                    347 ;Players/players.h:94: }
      00012E C9               [10]  348 	ret
                                    349 ;Players/players.h:96: void Player1UpdateDraw(unsigned char time)
                                    350 ;	---------------------------------
                                    351 ; Function Player1UpdateDraw
                                    352 ; ---------------------------------
      00012F                        353 _Player1UpdateDraw::
      00012F DD E5            [15]  354 	push	ix
      000131 DD 21 00 00      [14]  355 	ld	ix,#0
      000135 DD 39            [15]  356 	add	ix,sp
      000137 21 FA FF         [10]  357 	ld	hl, #-6
      00013A 39               [11]  358 	add	hl, sp
      00013B F9               [ 6]  359 	ld	sp, hl
                                    360 ;Players/players.h:100: if((time%8) == 0) {
      00013C E6 07            [ 7]  361 	and	a, #0x07
      00013E 20 59            [12]  362 	jr	NZ, 00121$
                                    363 ;Players/players.h:101: player_current_frame++;
      000140 FD 21r06r00      [14]  364 	ld	iy, #_player_current_frame
      000144 FD 34 00         [23]  365 	inc	0 (iy)
                                    366 ;Players/players.h:103: if(player_direction == UP)
      000147 3Ar07r00         [13]  367 	ld	a, (_player_direction+0)
      00014A B7               [ 4]  368 	or	a, a
      00014B 20 0E            [12]  369 	jr	NZ, 00118$
                                    370 ;Players/players.h:105: if(player_current_frame == PLAYER_UD_NUMBER_FRAMES) {
      00014D 3Ar06r00         [13]  371 	ld	a, (_player_current_frame+0)
      000150 D6 06            [ 7]  372 	sub	a, #0x06
      000152 20 45            [12]  373 	jr	NZ, 00121$
                                    374 ;Players/players.h:106: player_current_frame = 0;
      000154 FD 36 00 00      [19]  375 	ld	0 (iy), #0x00
      000158 C3r99r01         [10]  376 	jp	00121$
      00015B                        377 00118$:
                                    378 ;Players/players.h:109: else if(player_direction == DOWN)
      00015B 3Ar07r00         [13]  379 	ld	a, (_player_direction+0)
      00015E 3D               [ 4]  380 	dec	a
      00015F 20 0F            [12]  381 	jr	NZ, 00115$
                                    382 ;Players/players.h:111: if(player_current_frame == PLAYER_UD_NUMBER_FRAMES) {
      000161 3Ar06r00         [13]  383 	ld	a, (_player_current_frame+0)
      000164 D6 06            [ 7]  384 	sub	a, #0x06
      000166 20 31            [12]  385 	jr	NZ, 00121$
                                    386 ;Players/players.h:112: player_current_frame = 0;
      000168 21r06r00         [10]  387 	ld	hl, #_player_current_frame
      00016B 36 00            [10]  388 	ld	(hl), #0x00
      00016D C3r99r01         [10]  389 	jp	00121$
      000170                        390 00115$:
                                    391 ;Players/players.h:115: else if(player_direction == LEFT)
      000170 3Ar07r00         [13]  392 	ld	a, (_player_direction+0)
      000173 D6 02            [ 7]  393 	sub	a, #0x02
      000175 20 0F            [12]  394 	jr	NZ, 00112$
                                    395 ;Players/players.h:117: if(player_current_frame == PLAYER_LR_NUMBER_FRAMES) {
      000177 3Ar06r00         [13]  396 	ld	a, (_player_current_frame+0)
      00017A D6 06            [ 7]  397 	sub	a, #0x06
      00017C 20 1B            [12]  398 	jr	NZ, 00121$
                                    399 ;Players/players.h:118: player_current_frame = 0;
      00017E 21r06r00         [10]  400 	ld	hl, #_player_current_frame
      000181 36 00            [10]  401 	ld	(hl), #0x00
      000183 C3r99r01         [10]  402 	jp	00121$
      000186                        403 00112$:
                                    404 ;Players/players.h:121: else if(player_direction == RIGHT)
      000186 3Ar07r00         [13]  405 	ld	a, (_player_direction+0)
      000189 D6 03            [ 7]  406 	sub	a, #0x03
      00018B 20 0C            [12]  407 	jr	NZ, 00121$
                                    408 ;Players/players.h:123: if(player_current_frame == PLAYER_LR_NUMBER_FRAMES) {
      00018D 3Ar06r00         [13]  409 	ld	a, (_player_current_frame+0)
      000190 D6 06            [ 7]  410 	sub	a, #0x06
      000192 20 05            [12]  411 	jr	NZ, 00121$
                                    412 ;Players/players.h:124: player_current_frame = 0;
      000194 21r06r00         [10]  413 	ld	hl, #_player_current_frame
      000197 36 00            [10]  414 	ld	(hl), #0x00
      000199                        415 00121$:
                                    416 ;Players/players.h:129: if(player_direction == UP || player_direction == DOWN)
      000199 3Ar07r00         [13]  417 	ld	a, (_player_direction+0)
      00019C B7               [ 4]  418 	or	a, a
      00019D 28 07            [12]  419 	jr	Z, 00155$
      00019F 3Ar07r00         [13]  420 	ld	a, (_player_direction+0)
      0001A2 3D               [ 4]  421 	dec	a
      0001A3 C2r23r02         [10]  422 	jp	NZ,00130$
                                    423 ;Players/players.h:131: for(j=0; j<3; j++)
      0001A6                        424 00155$:
      0001A6 DD 36 FE 00      [19]  425 	ld	-2 (ix), #0x00
                                    426 ;Players/players.h:133: for(i=0; i<2; i++) {
      0001AA                        427 00153$:
      0001AA DD 36 FF 00      [19]  428 	ld	-1 (ix), #0x00
      0001AE                        429 00133$:
                                    430 ;Players/players.h:134: SMS_addSprite(player_x+(i<<3), player_y+(j<<3), PLAYER1_SPRITE_POSITION + player_direction_offset + player_current_frame * PLAYER_UD_NUMBER_TILES_BY_FRAME + PLAYER_UD_NUMBER_TILES_FRAMES_BOTH_DIRECTIONS *j + i);
      0001AE 3Ar04r00         [13]  431 	ld	a, (_player_x+0)
      0001B1 5F               [ 4]  432 	ld	e, a
      0001B2 16 00            [ 7]  433 	ld	d, #0x00
      0001B4 DD 4E FF         [19]  434 	ld	c, -1 (ix)
      0001B7 06 00            [ 7]  435 	ld	b, #0x00
      0001B9 69               [ 4]  436 	ld	l, c
      0001BA 60               [ 4]  437 	ld	h, b
      0001BB 29               [11]  438 	add	hl, hl
      0001BC 29               [11]  439 	add	hl, hl
      0001BD 29               [11]  440 	add	hl, hl
      0001BE 19               [11]  441 	add	hl, de
                                    442 ;	spillPairReg hl
                                    443 ;	spillPairReg hl
      0001BF DD 75 FD         [19]  444 	ld	-3 (ix), l
      0001C2 DD 36 FC 00      [19]  445 	ld	-4 (ix), #0x00
      0001C6 3Ar08r00         [13]  446 	ld	a, (_player_direction_offset+0)
                                    447 ;	spillPairReg hl
                                    448 ;	spillPairReg hl
                                    449 ;	spillPairReg hl
                                    450 ;	spillPairReg hl
      0001C9 5F               [ 4]  451 	ld	e, a
      0001CA AF               [ 4]  452 	xor	a, a
      0001CB 3C               [ 4]  453 	inc	a
      0001CC 57               [ 4]  454 	ld	d, a
      0001CD 3Ar06r00         [13]  455 	ld	a, (_player_current_frame+0)
      0001D0 6F               [ 4]  456 	ld	l, a
                                    457 ;	spillPairReg hl
                                    458 ;	spillPairReg hl
      0001D1 26 00            [ 7]  459 	ld	h, #0x00
                                    460 ;	spillPairReg hl
                                    461 ;	spillPairReg hl
      0001D3 29               [11]  462 	add	hl, hl
      0001D4 19               [11]  463 	add	hl, de
      0001D5 E5               [11]  464 	push	hl
      0001D6 FD E1            [14]  465 	pop	iy
      0001D8 DD 5E FE         [19]  466 	ld	e, -2 (ix)
      0001DB 16 00            [ 7]  467 	ld	d, #0x00
      0001DD D5               [11]  468 	push	de
      0001DE 6B               [ 4]  469 	ld	l, e
      0001DF 62               [ 4]  470 	ld	h, d
      0001E0 29               [11]  471 	add	hl, hl
      0001E1 19               [11]  472 	add	hl, de
      0001E2 29               [11]  473 	add	hl, hl
      0001E3 29               [11]  474 	add	hl, hl
      0001E4 D1               [10]  475 	pop	de
      0001E5 C5               [11]  476 	push	bc
      0001E6 4D               [ 4]  477 	ld	c, l
      0001E7 44               [ 4]  478 	ld	b, h
      0001E8 FD 09            [15]  479 	add	iy, bc
      0001EA C1               [10]  480 	pop	bc
      0001EB FD E5            [15]  481 	push	iy
      0001ED E1               [10]  482 	pop	hl
      0001EE 09               [11]  483 	add	hl, bc
      0001EF 26 00            [ 7]  484 	ld	h, #0x00
                                    485 ;	spillPairReg hl
                                    486 ;	spillPairReg hl
      0001F1 DD 7E FC         [19]  487 	ld	a, -4 (ix)
      0001F4 B5               [ 4]  488 	or	a, l
      0001F5 4F               [ 4]  489 	ld	c, a
      0001F6 DD 7E FD         [19]  490 	ld	a, -3 (ix)
      0001F9 B4               [ 4]  491 	or	a, h
      0001FA 47               [ 4]  492 	ld	b, a
      0001FB 3Ar05r00         [13]  493 	ld	a, (_player_y+0)
      0001FE 6F               [ 4]  494 	ld	l, a
                                    495 ;	spillPairReg hl
                                    496 ;	spillPairReg hl
      0001FF 26 00            [ 7]  497 	ld	h, #0x00
                                    498 ;	spillPairReg hl
                                    499 ;	spillPairReg hl
      000201 EB               [ 4]  500 	ex	de, hl
      000202 29               [11]  501 	add	hl, hl
      000203 29               [11]  502 	add	hl, hl
      000204 29               [11]  503 	add	hl, hl
      000205 EB               [ 4]  504 	ex	de, hl
      000206 19               [11]  505 	add	hl, de
      000207 59               [ 4]  506 	ld	e, c
      000208 50               [ 4]  507 	ld	d, b
      000209 CDr00r00         [17]  508 	call	_SMS_addSprite_f
                                    509 ;Players/players.h:133: for(i=0; i<2; i++) {
      00020C DD 34 FF         [23]  510 	inc	-1 (ix)
      00020F DD 7E FF         [19]  511 	ld	a, -1 (ix)
      000212 D6 02            [ 7]  512 	sub	a, #0x02
      000214 38 98            [12]  513 	jr	C, 00133$
                                    514 ;Players/players.h:131: for(j=0; j<3; j++)
      000216 DD 34 FE         [23]  515 	inc	-2 (ix)
      000219 DD 7E FE         [19]  516 	ld	a, -2 (ix)
      00021C D6 03            [ 7]  517 	sub	a, #0x03
      00021E 38 8A            [12]  518 	jr	C, 00153$
      000220 C3rB4r02         [10]  519 	jp	00141$
      000223                        520 00130$:
                                    521 ;Players/players.h:138: else if(player_direction == LEFT || player_direction == RIGHT)
      000223 3Ar07r00         [13]  522 	ld	a,(_player_direction+0)
      000226 FE 02            [ 7]  523 	cp	a,#0x02
      000228 28 05            [12]  524 	jr	Z, 00160$
      00022A D6 03            [ 7]  525 	sub	a, #0x03
      00022C C2rB4r02         [10]  526 	jp	NZ,00141$
                                    527 ;Players/players.h:140: for(j=0; j<3; j++)
      00022F                        528 00160$:
      00022F DD 36 FE 00      [19]  529 	ld	-2 (ix), #0x00
                                    530 ;Players/players.h:142: for(i=0; i<2; i++) {
      000233                        531 00158$:
      000233 DD 36 FF 00      [19]  532 	ld	-1 (ix), #0x00
      000237                        533 00137$:
                                    534 ;Players/players.h:143: SMS_addSprite(player_x+(i<<3), player_y+(j<<3), PLAYER1_SPRITE_POSITION + player_direction_offset + player_current_frame * PLAYER_LR_NUMBER_TILES_BY_FRAME + PLAYER_LR_NUMBER_TILES_FRAMES_BOTH_DIRECTIONS *j + i);
      000237 3Ar04r00         [13]  535 	ld	a, (_player_x+0)
      00023A 4F               [ 4]  536 	ld	c, a
      00023B 06 00            [ 7]  537 	ld	b, #0x00
      00023D DD 7E FF         [19]  538 	ld	a, -1 (ix)
      000240 DD 77 FA         [19]  539 	ld	-6 (ix), a
      000243 DD 36 FB 00      [19]  540 	ld	-5 (ix), #0x00
      000247 E1               [10]  541 	pop	hl
      000248 E5               [11]  542 	push	hl
      000249 29               [11]  543 	add	hl, hl
      00024A 29               [11]  544 	add	hl, hl
      00024B 29               [11]  545 	add	hl, hl
      00024C 09               [11]  546 	add	hl, bc
                                    547 ;	spillPairReg hl
                                    548 ;	spillPairReg hl
      00024D 45               [ 4]  549 	ld	b, l
      00024E 0E 00            [ 7]  550 	ld	c, #0x00
      000250 3Ar08r00         [13]  551 	ld	a, (_player_direction_offset+0)
      000253 16 00            [ 7]  552 	ld	d, #0x00
      000255 5F               [ 4]  553 	ld	e, a
      000256 14               [ 4]  554 	inc	d
      000257 3Ar06r00         [13]  555 	ld	a, (_player_current_frame+0)
      00025A 26 00            [ 7]  556 	ld	h, #0x00
                                    557 ;	spillPairReg hl
                                    558 ;	spillPairReg hl
      00025C 6F               [ 4]  559 	ld	l, a
      00025D 29               [11]  560 	add	hl, hl
      00025E 19               [11]  561 	add	hl, de
      00025F DD 75 FC         [19]  562 	ld	-4 (ix), l
      000262 DD 74 FD         [19]  563 	ld	-3 (ix), h
      000265 DD 5E FE         [19]  564 	ld	e, -2 (ix)
      000268 16 00            [ 7]  565 	ld	d, #0x00
      00026A D5               [11]  566 	push	de
      00026B 6B               [ 4]  567 	ld	l, e
      00026C 62               [ 4]  568 	ld	h, d
      00026D 29               [11]  569 	add	hl, hl
      00026E 19               [11]  570 	add	hl, de
      00026F 29               [11]  571 	add	hl, hl
      000270 29               [11]  572 	add	hl, hl
      000271 29               [11]  573 	add	hl, hl
      000272 D1               [10]  574 	pop	de
      000273 7D               [ 4]  575 	ld	a, l
      000274 DD 86 FC         [19]  576 	add	a, -4 (ix)
      000277 6F               [ 4]  577 	ld	l, a
                                    578 ;	spillPairReg hl
                                    579 ;	spillPairReg hl
      000278 7C               [ 4]  580 	ld	a, h
      000279 DD 8E FD         [19]  581 	adc	a, -3 (ix)
      00027C 67               [ 4]  582 	ld	h, a
                                    583 ;	spillPairReg hl
                                    584 ;	spillPairReg hl
      00027D 7D               [ 4]  585 	ld	a, l
      00027E DD 86 FA         [19]  586 	add	a, -6 (ix)
      000281 6F               [ 4]  587 	ld	l, a
                                    588 ;	spillPairReg hl
                                    589 ;	spillPairReg hl
      000282 7C               [ 4]  590 	ld	a, h
      000283 DD 8E FB         [19]  591 	adc	a, -5 (ix)
                                    592 ;	spillPairReg hl
                                    593 ;	spillPairReg hl
      000286 26 00            [ 7]  594 	ld	h, #0x00
                                    595 ;	spillPairReg hl
                                    596 ;	spillPairReg hl
      000288 79               [ 4]  597 	ld	a, c
      000289 B5               [ 4]  598 	or	a, l
      00028A 4F               [ 4]  599 	ld	c, a
      00028B 78               [ 4]  600 	ld	a, b
      00028C B4               [ 4]  601 	or	a, h
      00028D 47               [ 4]  602 	ld	b, a
      00028E 3Ar05r00         [13]  603 	ld	a, (_player_y+0)
      000291 6F               [ 4]  604 	ld	l, a
                                    605 ;	spillPairReg hl
                                    606 ;	spillPairReg hl
      000292 26 00            [ 7]  607 	ld	h, #0x00
                                    608 ;	spillPairReg hl
                                    609 ;	spillPairReg hl
      000294 EB               [ 4]  610 	ex	de, hl
      000295 29               [11]  611 	add	hl, hl
      000296 29               [11]  612 	add	hl, hl
      000297 29               [11]  613 	add	hl, hl
      000298 EB               [ 4]  614 	ex	de, hl
      000299 19               [11]  615 	add	hl, de
      00029A 59               [ 4]  616 	ld	e, c
      00029B 50               [ 4]  617 	ld	d, b
      00029C CDr00r00         [17]  618 	call	_SMS_addSprite_f
                                    619 ;Players/players.h:142: for(i=0; i<2; i++) {
      00029F DD 34 FF         [23]  620 	inc	-1 (ix)
      0002A2 DD 7E FF         [19]  621 	ld	a, -1 (ix)
      0002A5 D6 02            [ 7]  622 	sub	a, #0x02
      0002A7 38 8E            [12]  623 	jr	C, 00137$
                                    624 ;Players/players.h:140: for(j=0; j<3; j++)
      0002A9 DD 34 FE         [23]  625 	inc	-2 (ix)
      0002AC DD 7E FE         [19]  626 	ld	a, -2 (ix)
      0002AF D6 03            [ 7]  627 	sub	a, #0x03
      0002B1 DAr33r02         [10]  628 	jp	C, 00158$
      0002B4                        629 00141$:
                                    630 ;Players/players.h:147: }
      0002B4 DD F9            [10]  631 	ld	sp, ix
      0002B6 DD E1            [14]  632 	pop	ix
      0002B8 C9               [10]  633 	ret
                                    634 ;main.c:7: void loadGraphics2vram(void)
                                    635 ;	---------------------------------
                                    636 ; Function loadGraphics2vram
                                    637 ; ---------------------------------
      0002B9                        638 _loadGraphics2vram::
                                    639 ;main.c:10: SMS_VRAMmemsetW(0, 0x0000, 0x4000);
      0002B9 21 00 40         [10]  640 	ld	hl, #0x4000
      0002BC E5               [11]  641 	push	hl
      0002BD 11 00 00         [10]  642 	ld	de, #0x0000
      0002C0 65               [ 4]  643 	ld	h, l
      0002C1 CDr00r00         [17]  644 	call	_SMS_VRAMmemsetW
                                    645 ;main.c:12: SMS_loadBGPalette(backgroundpalette_bin);
      0002C4 21r00r00         [10]  646 	ld	hl, #_backgroundpalette_bin
      0002C7 CDr00r00         [17]  647 	call	_SMS_loadBGPalette
                                    648 ;main.c:13: SMS_loadPSGaidencompressedTiles(backgroundtiles_psgcompr, 0);
      0002CA 11 00 40         [10]  649 	ld	de, #0x4000
      0002CD 21r00r00         [10]  650 	ld	hl, #_backgroundtiles_psgcompr
      0002D0 CDr00r00         [17]  651 	call	_SMS_loadPSGaidencompressedTilesatAddr
                                    652 ;main.c:14: SMS_loadTileMap(0,0, backgroundtilemap_bin, backgroundtilemap_bin_size);
      0002D3 21 00 06         [10]  653 	ld	hl, #0x0600
      0002D6 E5               [11]  654 	push	hl
      0002D7 11r00r00         [10]  655 	ld	de, #_backgroundtilemap_bin
      0002DA 26 78            [ 7]  656 	ld	h, #0x78
      0002DC CDr00r00         [17]  657 	call	_SMS_VRAMmemcpy
                                    658 ;main.c:16: SMS_loadSpritePalette(spritepalette_bin);
      0002DF 21r00r00         [10]  659 	ld	hl, #_spritepalette_bin
      0002E2 CDr00r00         [17]  660 	call	_SMS_loadSpritePalette
                                    661 ;main.c:17: SMS_loadTiles(spritetiles_down_bin, PLAYER1_SPRITE_POSITION, 32*6*6); 
      0002E5 21 80 04         [10]  662 	ld	hl, #0x0480
      0002E8 E5               [11]  663 	push	hl
      0002E9 11r00r00         [10]  664 	ld	de, #_spritetiles_down_bin
      0002EC 21 00 60         [10]  665 	ld	hl, #0x6000
      0002EF CDr00r00         [17]  666 	call	_SMS_VRAMmemcpy
                                    667 ;main.c:19: SMS_setSpritePaletteColor(0, RGB(0, 0, 0));
                                    668 ;	spillPairReg hl
                                    669 ;	spillPairReg hl
      0002F2 AF               [ 4]  670 	xor	a, a
      0002F3 6F               [ 4]  671 	ld	l, a
      0002F4 CDr00r00         [17]  672 	call	_SMS_setSpritePaletteColor
                                    673 ;main.c:20: SMS_setBGPaletteColor(0, RGB(0, 2, 3));
      0002F7 2E 38            [ 7]  674 	ld	l, #0x38
                                    675 ;	spillPairReg hl
                                    676 ;	spillPairReg hl
      0002F9 AF               [ 4]  677 	xor	a, a
                                    678 ;main.c:21: }
      0002FA C3r00r00         [10]  679 	jp	_SMS_setBGPaletteColor
                                    680 ;main.c:23: void main (void)
                                    681 ;	---------------------------------
                                    682 ; Function main
                                    683 ; ---------------------------------
      0002FD                        684 _main::
                                    685 ;main.c:25: frame_counter = 0;
      0002FD 21r09r00         [10]  686 	ld	hl, #_frame_counter
      000300 36 00            [10]  687 	ld	(hl), #0x00
                                    688 ;main.c:27: Player1Init();
      000302 CDr44r00         [17]  689 	call	_Player1Init
                                    690 ;main.c:28: InitConsole();
      000305 CDr01r00         [17]  691 	call	_InitConsole
                                    692 ;main.c:30: loadGraphics2vram();
      000308 CDrB9r02         [17]  693 	call	_loadGraphics2vram
                                    694 ;main.c:31: SMS_displayOn();
      00030B 21 40 01         [10]  695 	ld	hl, #0x0140
      00030E CDr00r00         [17]  696 	call	_SMS_VDPturnOnFeature
                                    697 ;main.c:33: PSGPlay(music_psg);
      000311 21r00r00         [10]  698 	ld	hl, #_music_psg
      000314 CDr00r00         [17]  699 	call	_PSGPlay
                                    700 ;main.c:36: while(1)
      000317                        701 00111$:
                                    702 ;main.c:39: checkgamepause();
      000317 CDr1Er00         [17]  703 	call	_checkgamepause
                                    704 ;main.c:41: if(gamepause==0)
      00031A 3Ar01r00         [13]  705 	ld	a, (_gamepause+0)
      00031D B7               [ 4]  706 	or	a, a
      00031E 20 38            [12]  707 	jr	NZ, 00108$
                                    708 ;main.c:43: frame_counter++;
      000320 21r09r00         [10]  709 	ld	hl, #_frame_counter
      000323 34               [11]  710 	inc	(hl)
                                    711 ;main.c:45: if((frame_counter%64) == 0)
      000324 3Ar09r00         [13]  712 	ld	a, (_frame_counter+0)
      000327 E6 3F            [ 7]  713 	and	a, #0x3f
      000329 20 12            [12]  714 	jr	NZ, 00104$
                                    715 ;main.c:47: volume_atenuation++;
      00032B FD 21r0Ar00      [14]  716 	ld	iy, #_volume_atenuation
      00032F FD 34 00         [23]  717 	inc	0 (iy)
                                    718 ;main.c:48: if(volume_atenuation > 15)
      000332 3E 0F            [ 7]  719 	ld	a, #0x0f
      000334 FD 96 00         [19]  720 	sub	a, 0 (iy)
      000337 30 04            [12]  721 	jr	NC, 00104$
                                    722 ;main.c:50: volume_atenuation = 0;
      000339 FD 36 00 00      [19]  723 	ld	0 (iy), #0x00
      00033D                        724 00104$:
                                    725 ;main.c:54: SMS_initSprites();
      00033D CDr00r00         [17]  726 	call	_SMS_initSprites
                                    727 ;main.c:56: Player1Update(frame_counter);
      000340 3Ar09r00         [13]  728 	ld	a, (_frame_counter+0)
      000343 CDr64r00         [17]  729 	call	_Player1Update
                                    730 ;main.c:63: SMS_finalizeSprites();
      000346 CDr00r00         [17]  731 	call	_SMS_finalizeSprites
                                    732 ;main.c:64: SMS_waitForVBlank();
      000349 CDr00r00         [17]  733 	call	_SMS_waitForVBlank
                                    734 ;main.c:66: PSGFrame();
      00034C CDr00r00         [17]  735 	call	_PSGFrame
                                    736 ;main.c:67: PSGSFXFrame();
      00034F CDr00r00         [17]  737 	call	_PSGSFXFrame
                                    738 ;main.c:69: SMS_copySpritestoSAT();
      000352 CDr00r00         [17]  739 	call	_SMS_copySpritestoSAT
      000355 C3r17r03         [10]  740 	jp	00111$
      000358                        741 00108$:
                                    742 ;main.c:76: PSGFrame();
      000358 CDr00r00         [17]  743 	call	_PSGFrame
                                    744 ;main.c:78: if(PSGSFXGetStatus())
      00035B CDr00r00         [17]  745 	call	_PSGSFXGetStatus
      00035E B7               [ 4]  746 	or	a, a
      00035F 28 03            [12]  747 	jr	Z, 00106$
                                    748 ;main.c:80: PSGSFXFrame();
      000361 CDr00r00         [17]  749 	call	_PSGSFXFrame
      000364                        750 00106$:
                                    751 ;main.c:84: SMS_waitForVBlank();
      000364 CDr00r00         [17]  752 	call	_SMS_waitForVBlank
                                    753 ;main.c:87: numinterrupts=0;
      000367 21r00r00         [10]  754 	ld	hl, #_numinterrupts
      00036A 36 00            [10]  755 	ld	(hl), #0x00
                                    756 ;main.c:90: }
      00036C C3r17r03         [10]  757 	jp	00111$
                                    758 	.area _CODE
      00036F                        759 __str_0:
      00036F 47 61 72 79 20 50 61   760 	.ascii "Gary Paluk"
             6C 75 6B
      000379 00                     761 	.db 0x00
      00037A                        762 __str_1:
      00037A 4D 61 73 74 65 72 20   763 	.ascii "Master Blaster"
             42 6C 61 73 74 65 72
      000388 00                     764 	.db 0x00
      000389                        765 __str_2:
      000389 47 72 61 62 20 61 20   766 	.ascii "Grab a friend and jump into endless bombastic fun!"
             66 72 69 65 6E 64 20
             61 6E 64 20 6A 75 6D
             70 20 69 6E 74 6F 20
             65 6E 64 6C 65 73 73
             20 62 6F 6D 62 61 73
             74 69 63 20 66 75 6E
             21
      0003BB 00                     767 	.db 0x00
                                    768 	.area _INITIALIZER
                                    769 	.area _CABS (ABS)
      007FF0                        770 	.org 0x7FF0
      007FF0                        771 ___SMS__SEGA_signature:
      007FF0 54                     772 	.db #0x54	; 84	'T'
      007FF1 4D                     773 	.db #0x4d	; 77	'M'
      007FF2 52                     774 	.db #0x52	; 82	'R'
      007FF3 20                     775 	.db #0x20	; 32
      007FF4 53                     776 	.db #0x53	; 83	'S'
      007FF5 45                     777 	.db #0x45	; 69	'E'
      007FF6 47                     778 	.db #0x47	; 71	'G'
      007FF7 41                     779 	.db #0x41	; 65	'A'
      007FF8 FF                     780 	.db #0xff	; 255
      007FF9 FF                     781 	.db #0xff	; 255
      007FFA FF                     782 	.db #0xff	; 255
      007FFB FF                     783 	.db #0xff	; 255
      007FFC 99                     784 	.db #0x99	; 153
      007FFD 99                     785 	.db #0x99	; 153
      007FFE 00                     786 	.db #0x00	; 0
      007FFF 4C                     787 	.db #0x4c	; 76	'L'
      007FD5                        788 	.org 0x7FD5
      007FD5                        789 ___SMS__SDSC_author:
      007FD5 47 61 72 79 20 50 61   790 	.ascii "Gary Paluk"
             6C 75 6B
      007FDF 00                     791 	.db 0x00
      007FC6                        792 	.org 0x7FC6
      007FC6                        793 ___SMS__SDSC_name:
      007FC6 4D 61 73 74 65 72 20   794 	.ascii "Master Blaster"
             42 6C 61 73 74 65 72
      007FD4 00                     795 	.db 0x00
      007F93                        796 	.org 0x7F93
      007F93                        797 ___SMS__SDSC_descr:
      007F93 47 72 61 62 20 61 20   798 	.ascii "Grab a friend and jump into endless bombastic fun!"
             66 72 69 65 6E 64 20
             61 6E 64 20 6A 75 6D
             70 20 69 6E 74 6F 20
             65 6E 64 6C 65 73 73
             20 62 6F 6D 62 61 73
             74 69 63 20 66 75 6E
             21
      007FC5 00                     799 	.db 0x00
      007FE0                        800 	.org 0x7FE0
      007FE0                        801 ___SMS__SDSC_signature:
      007FE0 53                     802 	.db #0x53	; 83	'S'
      007FE1 44                     803 	.db #0x44	; 68	'D'
      007FE2 53                     804 	.db #0x53	; 83	'S'
      007FE3 43                     805 	.db #0x43	; 67	'C'
      007FE4 01                     806 	.db #0x01	; 1
      007FE5 00                     807 	.db #0x00	; 0
      007FE6 11                     808 	.db #0x11	; 17
      007FE7 07                     809 	.db #0x07	; 7
      007FE8 22                     810 	.db #0x22	; 34
      007FE9 20                     811 	.db #0x20	; 32
      007FEA D5                     812 	.db #0xd5	; 213
      007FEB 7F                     813 	.db #0x7f	; 127
      007FEC C6                     814 	.db #0xc6	; 198
      007FED 7F                     815 	.db #0x7f	; 127
      007FEE 93                     816 	.db #0x93	; 147
      007FEF 7F                     817 	.db #0x7f	; 127
